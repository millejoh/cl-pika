#+TITLE: The Dormouse Library
#+AUTHOR: Paul Sexton
#+EMAIL: eeeickythump@gmail.com
#+LINK: hs http://www.lispworks.com/reference/HyperSpec//%s
#+STARTUP: showall
#+OPTIONS: toc:4 H:10 @:t tags:nil

# link target 2: <<dormouse>>
# link target: <<package dormouse>>


* Internal Package: =dormouse=                                           :package:

- Uses:
    [[package common-lisp][common-lisp]], [[package tcod][tcod]], [[package
    iterate][iterate]]
- Used by:
    [[package tcod.gui-demo][tcod.gui-demo]]


** Description

DORMOUSE is a windowing `graphical' user interface library, built on top of
the [[http://doryen.eptalys.net/libtcod/][Doryen Library]] (libtcod).

** What is the Doryen Library?


The Doryen Library, or /libtcod/, is a library that implements a truecolour
console. It can be thought of as a souped-up alternative to
[[http://en.wikipedia.org/wiki/Curses_(programming_library)][Curses]]. The
console can be of any size that fits on the screen. Both keyboard and mouse
events are handled. There is support for artibrarily large character sets, and
font antialiasing. BMP and PNG images can be displayed alongside text.

While libtcod is well-suited for any application where a console-based
interface is desired, the author's motivation is to support the development of
roguelike games (see [[http://en.wikipedia.org/wiki/Roguelike_game]]). As such,
libtcod also provides line-of-sight calculations, pathfinding, perlin noise,
height maps, BSP, parsing of configuration files, and other features useful
to game developers.

Libtcod is written in C and C++. Bindings for libtcod are currently available
for the python, C#, D, and
[[http://bitbucket.org/eeeickythump/cl-tcod/][Common Lisp]] languages.

** What is DORMOUSE?


Dormouse ('Doryen' + 'Mouse', groan) is a windowing `graphical' user interface
built on top of libtcod. The programmer creates Window objects which are
displayed on the root console. The mouse can be used to move, resize, and close
windows. Keyboard and mouse events are sent to whichever window object has the
focus.

** Features


- Full mouse support, including drag and drop events from one window to another,
  moving and resizing windows with the mouse.
- Each window's foreground, background, and text can be displayed in any 32-bit
  colour.
- Text strings can contain formatting directives, similar to HTML, which can:
  -  instruct the library about the colours in which parts of the string should
     be displayed
  -  compose accented characters
  -  define 'live' areas of the string which generate special events when
     clicked with the mouse (acting like dialog buttons).
- Many subclasses of the base 'Window' class with specialised behaviour,
  including:
  - Viewports: windows which provide a view onto an underlying map (array),
    which may be much larger. Dragging with the mouse moves the viewport around
    the map. Intended for the main display area in roguelike games.
  - List windows: browse and select from a list of values. Items can have
    'hotkeys' defined for quick selection.
  - Filtered windows: list windows that allow the user to type a 'filter
    string', only displaying items which contain the string.
  - Menu windows: simplified list window where a single mouse click selects and
    closes the window.
  - Log windows: a scrolling 'buffer' of text, with new messages added at the
    bottom.
  - Modal windows: prevent access to other windows, forcing the user to respond
    to a message or dialog.
  - Ghost windows: cannot be interacted with, useful for simply displaying some
    information in an area of the screen.
  - Dialog windows: present strings containing 'dialog buttons' to the user.
  - Tooltip windows: display a message when the mouse hovers over items within
    the window.
  - Context windows: window in which right-clicking on an item brings up a list
    of commands which can be applied to the item, where the commands presented
    will vary according to the characteristics of the right-clicked item.
  - And any combination of the above, using multiple inheritance...
- Windows can be created as 'children' of other windows, allowing hiding,
  showing, creation and destruction of a complex group of windows as a unit

The latest version of DORMOUSE can be found at:
- [[http://bitbucket.org/eeeickythump/cl-dormouse/]]

** Dependencies


- The Doryen library, which can be found at http://doryen.eptalys.net/libtcod/]
- CL-TCOD: http://bitbucket.org/eeeickythump/cl-tcod/
- ITERATE: http://common-lisp.net/project/iterate/
- ASDF

** Installation


- Install all dependencies (see above).
- Download =DORMOUSE= from its
  [[http://bitbucket.org/eeeickythump/cl-dormouse/][repository.]]
- Run your lisp and make sure you can load asdf, and asdf can load
  =CL-TCOD= and =DORMOUSE=.
- The following is a minimal 'hello world' application:
#+BEGIN_EXAMPLE
 (in-package :cl-user)
 (defpackage :mypkg
  (:use :cl :tcod :dormouse)
  (:export #:my-test))

 (in-package :mypkg)

 (defun my-test ()
    (let ((msgwin nil))
      (dormouse:start-gui :title "Testing")
      (setf msgwin
        (make-instance '<Log-Window> :tlx 30 :tly 10 :width 20 :height 6
                      :title "log" :foreground :cornsilk
                      :background :dark-blue))
      (add-message msgwin "Press control-F1 or control-Esc to quit")
      (main-gui-loop)))
#+END_EXAMPLE
- Save it in a file, load it, and run (mypkg:my-test) at the lisp prompt
  to try it.


** External Symbols




*** External Classes

-----

# link target 2: <<..3c..alert-window..3e..>>
# link target: <<class ..3c..alert-window..3e..>>


**** Class: =<alert-window>=                                                  :class:


***** Inheritance

- Parent classes:
    [[class ..3c..modal-window..3e..][<modal-window>]], [[class ..3c..log
    window..3e..][<log-window>]]
- Precedence list:
    [[class ..3c..alert-window..3e..][<alert-window>]], [[class ..3c..modal
    window..3e..][<modal-window>]], [[class ..3c..log-window..3e..][<log-window>]],
    [[class ..3c..list-window..3e..][<list-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

TODO: document


***** Direct Slots

# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =t=
- Initial value: ="ALERT"=
- Initargs: none
- Allocation: instance


# link target 2: <<window-initial-text>>
# link target: <<slot window-initial-text>>


****** Slot: =window-initial-text=                                               :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: text
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-initial-text>>
# link target: <<slot-accessor window-initial-text>>


******** Slot Accessor: =window-initial-text=                             :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-initial-text object)
#+END_EXAMPLE


********* Methods

- (=window-initial-text= (<alert-window>                         [[class
  ..3c..alert-window..3e..][=dormouse:<alert-window>=]]))





# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<window-summon-mouse-on-raise..3f..>>
# link target: <<slot window-summon-mouse-on-raise..3f..>>


****** Slot: =window-summon-mouse-on-raise?=                                     :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: summon-mouse-on-raise?
- Allocation: instance


# link target 2: <<window-raw-messages>>
# link target: <<slot window-raw-messages>>


****** Slot: =window-raw-messages=                                               :slot:

- Value type: =t=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-max-messages>>
# link target: <<slot window-max-messages>>


****** Slot: =window-max-messages=                                               :slot:

- Value type: =t=
- Initial value: =100=
- Initargs: none
- Allocation: instance


# link target 2: <<window-show-tail-by-default..3f..>>
# link target: <<slot window-show-tail-by-default..3f..>>


****** Slot: =window-show-tail-by-default?=                                      :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..background-window..3e..>>
# link target: <<class ..3c..background-window..3e..>>


**** Class: =<background-window>=                                             :class:


***** Inheritance

- Parent classes:
    [[class ..3c..window..3e..][<window>]]
- Precedence list:
    [[class ..3c..background-window..3e..][<background-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..myviewport..3e..][<myviewport>]]


***** Description

Window that always makes itself the lowest in the stack.


***** Direct Slots

# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =t=
- Initial value: =dormouse:+opaque+=
- Initargs: none
- Allocation: instance


# link target 2: <<window-fades-when-unfocussed..3f..>>
# link target: <<slot window-fades-when-unfocussed..3f..>>


****** Slot: =window-fades-when-unfocussed?=                                     :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..dialog-window..3e..>>
# link target: <<class ..3c..dialog-window..3e..>>


**** Class: =<dialog-window>=                                                 :class:


***** Inheritance

- Parent classes:
    [[class ..3c..window..3e..][<window>]]
- Precedence list:
    [[class ..3c..dialog-window..3e..][<dialog-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..tooltip-window..3e..][<tooltip-window>]], [[class ..3c..hypertext
    window..3e..][<hypertext-window>]], [[class ..3c..yes..2f..no
    window..3e..][<yes/no-window>]]


***** Description

Window where regions of text can be defined to produce particular effects
when clicked on.


***** Direct Slots

# link target 2: <<dialog-console>>
# link target: <<slot dialog-console>>


****** Slot: =dialog-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<dialog-console>>
# link target: <<slot-accessor dialog-console>>


******** Slot Accessor: =dialog-console=                                  :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(dialog-console object)
#+END_EXAMPLE


********* Methods

- (=dialog-console= (<dialog-window>                    [[class ..3c..dialog
  window..3e..][=dormouse:<dialog-window>=]]))







***** Indirect Slots

# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..filtered-window..3e..>>
# link target: <<class ..3c..filtered-window..3e..>>


**** Class: =<filtered-window>=                                               :class:


***** Inheritance

- Parent classes:
    [[class ..3c..list-window..3e..][<list-window>]]
- Precedence list:
    [[class ..3c..filtered-window..3e..][<filtered-window>]], [[class ..3c..list
    window..3e..][<list-window>]], [[class ..3c..window..3e..][<window>]], [[class
    standard-object][standard-object]], [[class slot-object][slot-object]], [[class
    t][t]]
- Direct subclasses:
    None.


***** Description

List window which can selectively display only those items whose strings
contain the substring FILTER-STRING.  The active FILTER-STRING is displayed in
the lower border of the window.

Typing normal characters in the window will add those characters to the end of
FILTER-STRING.

Pressing BACKSPACE will erase a character from the end of FILTER-STRING.

Pressing DELETE will erase all characters in FILTER-STRING.


***** Direct Slots

# link target 2: <<filter-string>>
# link target: <<slot filter-string>>


****** Slot: =filter-string=                                                     :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<filter-string>>
# link target: <<slot-accessor filter-string>>


******** Slot Accessor: =filter-string=                                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(filter-string object)
#+END_EXAMPLE


********* Methods

- (=filter-string= (<filtered-window>                   [[class ..3c..filtered
  window..3e..][=dormouse:<filtered-window>=]]))





# link target 2: <<window-all-items>>
# link target: <<slot window-all-items>>


****** Slot: =window-all-items=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-all-items>>
# link target: <<slot-accessor window-all-items>>


******** Slot Accessor: =window-all-items=                                :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-all-items object)
#+END_EXAMPLE


********* Methods

- (=window-all-items= (<filtered-window>                      [[class
  ..3c..filtered-window..3e..][=dormouse:<filtered-window>=]]))





# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..ghost-window..3e..>>
# link target: <<class ..3c..ghost-window..3e..>>


**** Class: =<ghost-window>=                                                  :class:


***** Inheritance

- Parent classes:
    [[class ..3c..window..3e..][<window>]]
- Precedence list:
    [[class ..3c..ghost-window..3e..][<ghost-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..floating-window..3e..][<floating-window>]]


***** Description

Window that cannot be interacted with. Athough it may be
raised to the top of the window stack, it cannot receive any messages from the
mouse or keyboard. All such messages pass through to the window below it.


***** Direct Slots



***** Indirect Slots

# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..gui-dialog-event..3e..>>
# link target: <<class ..3c..gui-dialog-event..3e..>>


**** Class: =<gui-dialog-event>=                                              :class:


***** Inheritance

- Parent classes:
    [[class ..3c..gui-event..3e..][<gui-event>]]
- Precedence list:
    [[class ..3c..gui-dialog-event..3e..][<gui-dialog-event>]], [[class ..3c..gui
    event..3e..][<gui-event>]], [[class standard-object][standard-object]], [[class
    slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots

# link target 2: <<gui-event-type>>
# link target: <<slot gui-event-type>>


****** Internal Slot: =gui-event-type=                                           :slot:

- Value type: =t=
- Initial value: =:dialog=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-string>>
# link target: <<slot gui-event-string>>


****** Slot: =gui-event-string=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: string
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-string>>
# link target: <<slot-accessor gui-event-string>>


******** Slot Accessor: =gui-event-string=                                :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-string object)
#+END_EXAMPLE


********* Methods

- (=gui-event-string= (<gui-dialog-event>                      [[class
  ..3c..gui-dialog-event..3e..][=dormouse:<gui-dialog-event>=]]))







***** Indirect Slots

# link target 2: <<gui-event-time>>
# link target: <<slot gui-event-time>>


****** Slot: =gui-event-time=                                                    :slot:

- Value type: =t=
- Initial value: =(tcod:sys-elapsed-milli)=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-winy>>
# link target: <<slot gui-event-winy>>


****** Slot: =gui-event-winy=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winy
- Allocation: instance


# link target 2: <<gui-event-winx>>
# link target: <<slot gui-event-winx>>


****** Slot: =gui-event-winx=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winx
- Allocation: instance


# link target 2: <<gui-event-window>>
# link target: <<slot gui-event-window>>


****** Slot: =gui-event-window=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: window
- Allocation: instance





-----

# link target 2: <<..3c..gui-event..3e..>>
# link target: <<class ..3c..gui-event..3e..>>


**** Internal Class: =<gui-event>=                                            :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class ..3c..gui-event..3e..][<gui-event>]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..gui-select-event..3e..][<gui-select-event>]], [[class ..3c..gui
    dialog-event..3e..][<gui-dialog-event>]], [[class ..3c..mouse
    event..3e..][<mouse-event>]], [[class ..3c..key-event..3e..][<key-event>]]


***** Description

Not documented.


***** Direct Slots

# link target 2: <<gui-event-type>>
# link target: <<slot gui-event-type>>


****** Internal Slot: =gui-event-type=                                           :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-type
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-type>>
# link target: <<slot-accessor gui-event-type>>


******** Internal Slot Accessor: =gui-event-type=                         :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-type object)
#+END_EXAMPLE


********* Methods

- (=gui-event-type= (<gui-event>                    [[class ..3c..gui
  event..3e..][=dormouse:<gui-event>=]]))





# link target 2: <<gui-event-window>>
# link target: <<slot gui-event-window>>


****** Slot: =gui-event-window=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: window
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-window>>
# link target: <<slot-accessor gui-event-window>>


******** Slot Accessor: =gui-event-window=                                :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-window object)
#+END_EXAMPLE


********* Methods

- (=gui-event-window= (<gui-event>                      [[class ..3c..gui
  event..3e..][=dormouse:<gui-event>=]]))





# link target 2: <<gui-event-winx>>
# link target: <<slot gui-event-winx>>


****** Slot: =gui-event-winx=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winx
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-winx>>
# link target: <<slot-accessor gui-event-winx>>


******** Slot Accessor: =gui-event-winx=                                  :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-winx object)
#+END_EXAMPLE


********* Methods

- (=gui-event-winx= (<gui-event>                    [[class ..3c..gui
  event..3e..][=dormouse:<gui-event>=]]))





# link target 2: <<gui-event-winy>>
# link target: <<slot gui-event-winy>>


****** Slot: =gui-event-winy=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winy
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-winy>>
# link target: <<slot-accessor gui-event-winy>>


******** Slot Accessor: =gui-event-winy=                                  :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-winy object)
#+END_EXAMPLE


********* Methods

- (=gui-event-winy= (<gui-event>                    [[class ..3c..gui
  event..3e..][=dormouse:<gui-event>=]]))





# link target 2: <<gui-event-time>>
# link target: <<slot gui-event-time>>


****** Slot: =gui-event-time=                                                    :slot:

- Value type: =t=
- Initial value: =(tcod:sys-elapsed-milli)=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-time>>
# link target: <<slot-accessor gui-event-time>>


******** Slot Accessor: =gui-event-time=                                  :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-time object)
#+END_EXAMPLE


********* Methods

- (=gui-event-time= (<gui-event>                    [[class ..3c..gui
  event..3e..][=dormouse:<gui-event>=]]))








-----

# link target 2: <<..3c..gui-mouse-drag-event..3e..>>
# link target: <<class ..3c..gui-mouse-drag-event..3e..>>


**** Class: =<gui-mouse-drag-event>=                                          :class:


***** Inheritance

- Parent classes:
    [[class ..3c..mouse-event..3e..][<mouse-event>]]
- Precedence list:
    [[class ..3c..gui-mouse-drag-event..3e..][<gui-mouse-drag-event>]], [[class
    ..3c..mouse-event..3e..][<mouse-event>]], [[class ..3c..gui-event..3e..][<gui
    event>]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots

# link target 2: <<gui-event-type>>
# link target: <<slot gui-event-type>>


****** Internal Slot: =gui-event-type=                                           :slot:

- Value type: =t=
- Initial value: =:mouse-drag=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<gui-event-mouse-state>>
# link target: <<slot gui-event-mouse-state>>


****** Slot: =gui-event-mouse-state=                                             :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: mouse-state
- Allocation: instance


# link target 2: <<gui-event-time>>
# link target: <<slot gui-event-time>>


****** Slot: =gui-event-time=                                                    :slot:

- Value type: =t=
- Initial value: =(tcod:sys-elapsed-milli)=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-winy>>
# link target: <<slot gui-event-winy>>


****** Slot: =gui-event-winy=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winy
- Allocation: instance


# link target 2: <<gui-event-winx>>
# link target: <<slot gui-event-winx>>


****** Slot: =gui-event-winx=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winx
- Allocation: instance


# link target 2: <<gui-event-window>>
# link target: <<slot gui-event-window>>


****** Slot: =gui-event-window=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: window
- Allocation: instance





-----

# link target 2: <<..3c..gui-select-event..3e..>>
# link target: <<class ..3c..gui-select-event..3e..>>


**** Internal Class: =<gui-select-event>=                                     :class:


***** Inheritance

- Parent classes:
    [[class ..3c..gui-event..3e..][<gui-event>]]
- Precedence list:
    [[class ..3c..gui-select-event..3e..][<gui-select-event>]], [[class ..3c..gui
    event..3e..][<gui-event>]], [[class standard-object][standard-object]], [[class
    slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots

# link target 2: <<gui-event-type>>
# link target: <<slot gui-event-type>>


****** Internal Slot: =gui-event-type=                                           :slot:

- Value type: =t=
- Initial value: =:select=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-focus>>
# link target: <<slot gui-event-focus>>


****** Internal Slot: =gui-event-focus=                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: focus
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-focus>>
# link target: <<slot-accessor gui-event-focus>>


******** Internal Slot Accessor: =gui-event-focus=                        :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-focus object)
#+END_EXAMPLE


********* Methods

- (=gui-event-focus= (<gui-select-event>                     [[class ..3c..gui
  select-event..3e..][=dormouse:<gui-select-event>=]]))
- (=gui-event-focus= (<mouse-hover-event>                     [[class
  ..3c..mouse-hover-event..3e..][=dormouse:<mouse-hover-event>=]]))







***** Indirect Slots

# link target 2: <<gui-event-time>>
# link target: <<slot gui-event-time>>


****** Slot: =gui-event-time=                                                    :slot:

- Value type: =t=
- Initial value: =(tcod:sys-elapsed-milli)=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-winy>>
# link target: <<slot gui-event-winy>>


****** Slot: =gui-event-winy=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winy
- Allocation: instance


# link target 2: <<gui-event-winx>>
# link target: <<slot gui-event-winx>>


****** Slot: =gui-event-winx=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winx
- Allocation: instance


# link target 2: <<gui-event-window>>
# link target: <<slot gui-event-window>>


****** Slot: =gui-event-window=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: window
- Allocation: instance





-----

# link target 2: <<..3c..hypertext-window..3e..>>
# link target: <<class ..3c..hypertext-window..3e..>>


**** Class: =<hypertext-window>=                                              :class:


***** Inheritance

- Parent classes:
    [[class ..3c..dialog-window..3e..][<dialog-window>]], [[class ..3c..pager
    window..3e..][<pager-window>]]
- Precedence list:
    [[class ..3c..hypertext-window..3e..][<hypertext-window>]], [[class
    ..3c..dialog-window..3e..][<dialog-window>]], [[class ..3c..pager
    window..3e..][<pager-window>]], [[class ..3c..log-window..3e..][<log-window>]],
    [[class ..3c..list-window..3e..][<list-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Press BACKSPACE or LEFT arrow to go back to the last topic.
Press HOME to go back to the 'root' or 'start' topic.


***** Direct Slots

# link target 2: <<hypertext-lookup-function>>
# link target: <<slot hypertext-lookup-function>>


****** Slot: =hypertext-lookup-function=                                         :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: lookup-function
- Allocation: instance


******* Accessors

-----

# link target 2: <<hypertext-lookup-function>>
# link target: <<slot-accessor hypertext-lookup-function>>


******** Slot Accessor: =hypertext-lookup-function=                       :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(hypertext-lookup-function object)
#+END_EXAMPLE


********* Methods

- (=hypertext-lookup-function= (<hypertext-window>
   [[class ..3c..hypertext-window..3e..][=dormouse:<hypertext-window>=]]))





# link target 2: <<hyperlink-foreground-colour>>
# link target: <<slot hyperlink-foreground-colour>>


****** Slot: =hyperlink-foreground-colour=                                       :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: hyperlink-fg
- Allocation: instance


# link target 2: <<hypertext-start-topic>>
# link target: <<slot hypertext-start-topic>>


****** Slot: =hypertext-start-topic=                                             :slot:

- Value type: =t=
- Initial value: ="Start"=
- Initargs: start-topic
- Allocation: instance


******* Accessors

-----

# link target 2: <<hypertext-start-topic>>
# link target: <<slot-accessor hypertext-start-topic>>


******** Slot Accessor: =hypertext-start-topic=                           :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(hypertext-start-topic object)
#+END_EXAMPLE


********* Methods

- (=hypertext-start-topic= (<hypertext-window>
  [[class ..3c..hypertext-window..3e..][=dormouse:<hypertext-window>=]]))





# link target 2: <<hypertext-history>>
# link target: <<slot hypertext-history>>


****** Slot: =hypertext-history=                                                 :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<hypertext-history>>
# link target: <<slot-accessor hypertext-history>>


******** Slot Accessor: =hypertext-history=                               :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(hypertext-history object)
#+END_EXAMPLE


********* Methods

- (=hypertext-history= (<hypertext-window>                       [[class
  ..3c..hypertext-window..3e..][=dormouse:<hypertext-window>=]]))







***** Indirect Slots

# link target 2: <<dialog-console>>
# link target: <<slot dialog-console>>


****** Slot: =dialog-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-raw-messages>>
# link target: <<slot window-raw-messages>>


****** Slot: =window-raw-messages=                                               :slot:

- Value type: =t=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-max-messages>>
# link target: <<slot window-max-messages>>


****** Slot: =window-max-messages=                                               :slot:

- Value type: =t=
- Initial value: =100=
- Initargs: none
- Allocation: instance


# link target 2: <<window-show-tail-by-default..3f..>>
# link target: <<slot window-show-tail-by-default..3f..>>


****** Slot: =window-show-tail-by-default?=                                      :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..key-event..3e..>>
# link target: <<class ..3c..key-event..3e..>>


**** Class: =<key-event>=                                                     :class:


***** Inheritance

- Parent classes:
    [[class ..3c..gui-event..3e..][<gui-event>]]
- Precedence list:
    [[class ..3c..key-event..3e..][<key-event>]], [[class ..3c..gui
    event..3e..][<gui-event>]], [[class standard-object][standard-object]], [[class
    slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots

# link target 2: <<gui-event-type>>
# link target: <<slot gui-event-type>>


****** Internal Slot: =gui-event-type=                                           :slot:

- Value type: =t=
- Initial value: =:keypress=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-keypress>>
# link target: <<slot gui-event-keypress>>


****** Slot: =gui-event-keypress=                                                :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: keypress
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-keypress>>
# link target: <<slot-accessor gui-event-keypress>>


******** Slot Accessor: =gui-event-keypress=                              :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-keypress object)
#+END_EXAMPLE


********* Methods

- (=gui-event-keypress= (<key-event>                        [[class ..3c..key
  event..3e..][=dormouse:<key-event>=]]))







***** Indirect Slots

# link target 2: <<gui-event-time>>
# link target: <<slot gui-event-time>>


****** Slot: =gui-event-time=                                                    :slot:

- Value type: =t=
- Initial value: =(tcod:sys-elapsed-milli)=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-winy>>
# link target: <<slot gui-event-winy>>


****** Slot: =gui-event-winy=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winy
- Allocation: instance


# link target 2: <<gui-event-winx>>
# link target: <<slot gui-event-winx>>


****** Slot: =gui-event-winx=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winx
- Allocation: instance


# link target 2: <<gui-event-window>>
# link target: <<slot gui-event-window>>


****** Slot: =gui-event-window=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: window
- Allocation: instance





-----

# link target 2: <<..3c..list-window..3e..>>
# link target: <<class ..3c..list-window..3e..>>


**** Internal Class: =<list-window>=                                          :class:


***** Inheritance

- Parent classes:
    [[class ..3c..window..3e..][<window>]]
- Precedence list:
    [[class ..3c..list-window..3e..][<list-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..log-window..3e..][<log-window>]], [[class ..3c..menu
    window..3e..][<menu-window>]], [[class ..3c..filtered-window..3e..][<filtered
    window>]]


***** Description

Window that displays a list of strings which can be scrolled.

Up and down arrows move the cursor up and down the list.

Page-up and page-down keys move the cursor a page at a time.

Home and end keys move the cursor to the first and last item in the list.

Left clicking on an item in the list, moves the cursor to that item.

Pressing a 'hotkey' associated with an item, moves the cursor to that item.

Left and right clicks on the lower border of the window move the display down or
up a page at a time.

The enter key selects the item under the cursor.


***** Direct Slots

# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-items>>
# link target: <<slot-accessor window-items>>


******** Internal Slot Accessor: =window-items=                           :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-items object)
#+END_EXAMPLE


********* Methods

- (=window-items= (<list-window>                  [[class ..3c..list
  window..3e..][=dormouse:<list-window>=]]))





# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-offset>>
# link target: <<slot-accessor window-offset>>


******** Internal Slot Accessor: =window-offset=                          :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-offset object)
#+END_EXAMPLE


********* Methods

- (=window-offset= (<list-window>                   [[class ..3c..list
  window..3e..][=dormouse:<list-window>=]]))





# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-cursor>>
# link target: <<slot-accessor window-cursor>>


******** Slot Accessor: =window-cursor=                                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-cursor object)
#+END_EXAMPLE


********* Methods

- (=window-cursor= (<list-window>                   [[class ..3c..list
  window..3e..][=dormouse:<list-window>=]]))







***** Indirect Slots

# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..log-window..3e..>>
# link target: <<class ..3c..log-window..3e..>>


**** Class: =<log-window>=                                                    :class:


***** Inheritance

- Parent classes:
    [[class ..3c..list-window..3e..][<list-window>]]
- Precedence list:
    [[class ..3c..log-window..3e..][<log-window>]], [[class ..3c..list
    window..3e..][<list-window>]], [[class ..3c..window..3e..][<window>]], [[class
    standard-object][standard-object]], [[class slot-object][slot-object]], [[class
    t][t]]
- Direct subclasses:
    [[class ..3c..floating-window..3e..][<floating-window>]], [[class
    ..3c..terminal-window..3e..][<terminal-window>]], [[class ..3c..pager
    window..3e..][<pager-window>]], [[class ..3c..alert-window..3e..][<alert
    window>]]


***** Description

A kind of list-window where messages are appended to the end of the list.


***** Direct Slots

# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-show-tail-by-default..3f..>>
# link target: <<slot window-show-tail-by-default..3f..>>


****** Slot: =window-show-tail-by-default?=                                      :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-show-tail-by-default..3f..>>
# link target: <<slot-accessor window-show-tail-by-default..3f..>>


******** Slot Accessor: =window-show-tail-by-default?=                    :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-show-tail-by-default? object)
#+END_EXAMPLE


********* Methods

- (=window-show-tail-by-default?= (<log-window>
   [[class ..3c..log-window..3e..][=dormouse:<log-window>=]]))





# link target 2: <<window-max-messages>>
# link target: <<slot window-max-messages>>


****** Slot: =window-max-messages=                                               :slot:

- Value type: =t=
- Initial value: =100=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-max-messages>>
# link target: <<slot-accessor window-max-messages>>


******** Slot Accessor: =window-max-messages=                             :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-max-messages object)
#+END_EXAMPLE


********* Methods

- (=window-max-messages= (<log-window>                         [[class
  ..3c..log-window..3e..][=dormouse:<log-window>=]]))





# link target 2: <<window-raw-messages>>
# link target: <<slot window-raw-messages>>


****** Slot: =window-raw-messages=                                               :slot:

- Value type: =t=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-raw-messages>>
# link target: <<slot-accessor window-raw-messages>>


******** Slot Accessor: =window-raw-messages=                             :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-raw-messages object)
#+END_EXAMPLE


********* Methods

- (=window-raw-messages= (<log-window>                         [[class
  ..3c..log-window..3e..][=dormouse:<log-window>=]]))







***** Indirect Slots

# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..menu-window..3e..>>
# link target: <<class ..3c..menu-window..3e..>>


**** Class: =<menu-window>=                                                   :class:


***** Inheritance

- Parent classes:
    [[class ..3c..list-window..3e..][<list-window>]]
- Precedence list:
    [[class ..3c..menu-window..3e..][<menu-window>]], [[class ..3c..list
    window..3e..][<list-window>]], [[class ..3c..window..3e..][<window>]], [[class
    standard-object][standard-object]], [[class slot-object][slot-object]], [[class
    t][t]]
- Direct subclasses:
    [[class ..3c..context-menu..3e..][<context-menu>]]


***** Description

List window that cannot be scrolled or resized. Clicking on an item
closes the menu window and returns the item. Hovering the mouse over an item
moves the cursor to that item.


***** Direct Slots

# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-menu-items>>
# link target: <<slot window-menu-items>>


****** Slot: =window-menu-items=                                                 :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: items
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-menu-items>>
# link target: <<slot-accessor window-menu-items>>


******** Slot Accessor: =window-menu-items=                               :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-menu-items object)
#+END_EXAMPLE


********* Methods

- (=window-menu-items= (<menu-window>                       [[class ..3c..menu
  window..3e..][=dormouse:<menu-window>=]]))







***** Indirect Slots

# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..meter-window..3e..>>
# link target: <<class ..3c..meter-window..3e..>>


**** Class: =<meter-window>=                                                  :class:


***** Inheritance

- Parent classes:
    [[class ..3c..window..3e..][<window>]]
- Precedence list:
    [[class ..3c..meter-window..3e..][<meter-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

The window will display a vertical list of bar charts.
Each chart will be labelled with STRING.
Note that by default the bar charts will only be updated if the
window is told it has changed (eg via WINDOW-CHANGED?). To make the
bar charts automatically update every few seconds, set the slot
WINDOW-AUTO-REDRAW-TIME to an appropriate value in milliseconds.


***** Direct Slots

# link target 2: <<window-meters>>
# link target: <<slot window-meters>>


****** Slot: =window-meters=                                                     :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: meters
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-meters>>
# link target: <<slot-accessor window-meters>>


******** Slot Accessor: =window-meters=                                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-meters object)
#+END_EXAMPLE


********* Methods

- (=window-meters= (<meter-window>                   [[class ..3c..meter
  window..3e..][=dormouse:<meter-window>=]]))







***** Indirect Slots

# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..modal-window..3e..>>
# link target: <<class ..3c..modal-window..3e..>>


**** Class: =<modal-window>=                                                  :class:


***** Inheritance

- Parent classes:
    [[class ..3c..window..3e..][<window>]]
- Precedence list:
    [[class ..3c..modal-window..3e..][<modal-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..simple-prompt-window..3e..][<simple-prompt-window>]], [[class
    ..3c..yes..2f..no-window..3e..][<yes/no-window>]], [[class ..3c..alert
    window..3e..][<alert-window>]]


***** Description

These monopolise the mouse and keyboard whenever they are
the topmost window. The user must cause the modal window to close before events
can be sent to any other windows.


***** Direct Slots

# link target 2: <<window-summon-mouse-on-raise..3f..>>
# link target: <<slot window-summon-mouse-on-raise..3f..>>


****** Slot: =window-summon-mouse-on-raise?=                                     :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: summon-mouse-on-raise?
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-summon-mouse-on-raise..3f..>>
# link target: <<slot-accessor window-summon-mouse-on-raise..3f..>>


******** Slot Accessor: =window-summon-mouse-on-raise?=                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-summon-mouse-on-raise? object)
#+END_EXAMPLE


********* Methods

- (=window-summon-mouse-on-raise?= (<modal-window>
       [[class ..3c..modal-window..3e..][=dormouse:<modal-window>=]]))







***** Indirect Slots

# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..mouse-double-click-event..3e..>>
# link target: <<class ..3c..mouse-double-click-event..3e..>>


**** Class: =<mouse-double-click-event>=                                      :class:


***** Inheritance

- Parent classes:
    [[class ..3c..mouse-event..3e..][<mouse-event>]]
- Precedence list:
    [[class ..3c..mouse-double-click-event..3e..][<mouse-double-click-event>]],
    [[class ..3c..mouse-event..3e..][<mouse-event>]], [[class ..3c..gui
    event..3e..][<gui-event>]], [[class standard-object][standard-object]], [[class
    slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots

# link target 2: <<gui-event-type>>
# link target: <<slot gui-event-type>>


****** Internal Slot: =gui-event-type=                                           :slot:

- Value type: =t=
- Initial value: =:mouse-double-click=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<gui-event-mouse-state>>
# link target: <<slot gui-event-mouse-state>>


****** Slot: =gui-event-mouse-state=                                             :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: mouse-state
- Allocation: instance


# link target 2: <<gui-event-time>>
# link target: <<slot gui-event-time>>


****** Slot: =gui-event-time=                                                    :slot:

- Value type: =t=
- Initial value: =(tcod:sys-elapsed-milli)=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-winy>>
# link target: <<slot gui-event-winy>>


****** Slot: =gui-event-winy=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winy
- Allocation: instance


# link target 2: <<gui-event-winx>>
# link target: <<slot gui-event-winx>>


****** Slot: =gui-event-winx=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winx
- Allocation: instance


# link target 2: <<gui-event-window>>
# link target: <<slot gui-event-window>>


****** Slot: =gui-event-window=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: window
- Allocation: instance





-----

# link target 2: <<..3c..mouse-event..3e..>>
# link target: <<class ..3c..mouse-event..3e..>>


**** Internal Class: =<mouse-event>=                                          :class:


***** Inheritance

- Parent classes:
    [[class ..3c..gui-event..3e..][<gui-event>]]
- Precedence list:
    [[class ..3c..mouse-event..3e..][<mouse-event>]], [[class ..3c..gui
    event..3e..][<gui-event>]], [[class standard-object][standard-object]], [[class
    slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..mouse-hover-event..3e..][<mouse-hover-event>]], [[class ..3c..gui
    mouse-drag-event..3e..][<gui-mouse-drag-event>]], [[class ..3c..mouse-double
    click-event..3e..][<mouse-double-click-event>]]


***** Description

Not documented.


***** Direct Slots

# link target 2: <<gui-event-type>>
# link target: <<slot gui-event-type>>


****** Internal Slot: =gui-event-type=                                           :slot:

- Value type: =t=
- Initial value: =:mouse=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-mouse-state>>
# link target: <<slot gui-event-mouse-state>>


****** Slot: =gui-event-mouse-state=                                             :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: mouse-state
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-mouse-state>>
# link target: <<slot-accessor gui-event-mouse-state>>


******** Slot Accessor: =gui-event-mouse-state=                           :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-mouse-state object)
#+END_EXAMPLE


********* Methods

- (=gui-event-mouse-state= (<mouse-event>                           [[class
  ..3c..mouse-event..3e..][=dormouse:<mouse-event>=]]))







***** Indirect Slots

# link target 2: <<gui-event-time>>
# link target: <<slot gui-event-time>>


****** Slot: =gui-event-time=                                                    :slot:

- Value type: =t=
- Initial value: =(tcod:sys-elapsed-milli)=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-winy>>
# link target: <<slot gui-event-winy>>


****** Slot: =gui-event-winy=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winy
- Allocation: instance


# link target 2: <<gui-event-winx>>
# link target: <<slot gui-event-winx>>


****** Slot: =gui-event-winx=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winx
- Allocation: instance


# link target 2: <<gui-event-window>>
# link target: <<slot gui-event-window>>


****** Slot: =gui-event-window=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: window
- Allocation: instance





-----

# link target 2: <<..3c..mouse-hover-event..3e..>>
# link target: <<class ..3c..mouse-hover-event..3e..>>


**** Internal Class: =<mouse-hover-event>=                                    :class:


***** Inheritance

- Parent classes:
    [[class ..3c..mouse-event..3e..][<mouse-event>]]
- Precedence list:
    [[class ..3c..mouse-hover-event..3e..][<mouse-hover-event>]], [[class
    ..3c..mouse-event..3e..][<mouse-event>]], [[class ..3c..gui-event..3e..][<gui
    event>]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots

# link target 2: <<gui-event-type>>
# link target: <<slot gui-event-type>>


****** Internal Slot: =gui-event-type=                                           :slot:

- Value type: =t=
- Initial value: =:mouse-hover=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-focus>>
# link target: <<slot gui-event-focus>>


****** Internal Slot: =gui-event-focus=                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: focus
- Allocation: instance


******* Accessors

-----

# link target 2: <<gui-event-focus>>
# link target: <<slot-accessor gui-event-focus>>


******** Internal Slot Accessor: =gui-event-focus=                        :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(gui-event-focus object)
#+END_EXAMPLE


********* Methods

- (=gui-event-focus= (<gui-select-event>                     [[class ..3c..gui
  select-event..3e..][=dormouse:<gui-select-event>=]]))
- (=gui-event-focus= (<mouse-hover-event>                     [[class
  ..3c..mouse-hover-event..3e..][=dormouse:<mouse-hover-event>=]]))







***** Indirect Slots

# link target 2: <<gui-event-mouse-state>>
# link target: <<slot gui-event-mouse-state>>


****** Slot: =gui-event-mouse-state=                                             :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: mouse-state
- Allocation: instance


# link target 2: <<gui-event-time>>
# link target: <<slot gui-event-time>>


****** Slot: =gui-event-time=                                                    :slot:

- Value type: =t=
- Initial value: =(tcod:sys-elapsed-milli)=
- Initargs: none
- Allocation: instance


# link target 2: <<gui-event-winy>>
# link target: <<slot gui-event-winy>>


****** Slot: =gui-event-winy=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winy
- Allocation: instance


# link target 2: <<gui-event-winx>>
# link target: <<slot gui-event-winx>>


****** Slot: =gui-event-winx=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: winx
- Allocation: instance


# link target 2: <<gui-event-window>>
# link target: <<slot gui-event-window>>


****** Slot: =gui-event-window=                                                  :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: window
- Allocation: instance





-----

# link target 2: <<..3c..pager-window..3e..>>
# link target: <<class ..3c..pager-window..3e..>>


**** Class: =<pager-window>=                                                  :class:


***** Inheritance

- Parent classes:
    [[class ..3c..log-window..3e..][<log-window>]]
- Precedence list:
    [[class ..3c..pager-window..3e..][<pager-window>]], [[class ..3c..log
    window..3e..][<log-window>]], [[class ..3c..list-window..3e..][<list-window>]],
    [[class ..3c..window..3e..][<window>]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..hypertext-window..3e..][<hypertext-window>]]


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<window-raw-messages>>
# link target: <<slot window-raw-messages>>


****** Slot: =window-raw-messages=                                               :slot:

- Value type: =t=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-max-messages>>
# link target: <<slot window-max-messages>>


****** Slot: =window-max-messages=                                               :slot:

- Value type: =t=
- Initial value: =100=
- Initargs: none
- Allocation: instance


# link target 2: <<window-show-tail-by-default..3f..>>
# link target: <<slot window-show-tail-by-default..3f..>>


****** Slot: =window-show-tail-by-default?=                                      :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..simple-prompt-window..3e..>>
# link target: <<class ..3c..simple-prompt-window..3e..>>


**** Class: =<simple-prompt-window>=                                          :class:


***** Inheritance

- Parent classes:
    [[class ..3c..terminal-window..3e..][<terminal-window>]], [[class ..3c..modal
    window..3e..][<modal-window>]]
- Precedence list:
    [[class ..3c..simple-prompt-window..3e..][<simple-prompt-window>]], [[class
    ..3c..terminal-window..3e..][<terminal-window>]], [[class ..3c..log
    window..3e..][<log-window>]], [[class ..3c..list-window..3e..][<list-window>]],
    [[class ..3c..modal-window..3e..][<modal-window>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots

# link target 2: <<window-echo-input..3f..>>
# link target: <<slot window-echo-input..3f..>>


****** Slot: =window-echo-input?=                                                :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<window-input-function>>
# link target: <<slot window-input-function>>


****** Slot: =window-input-function=                                             :slot:

- Value type: =t=
- Initial value: =(lambda (dormouse::win dormouse::str)
  (declare (ignore dormouse::win dormouse::str))
                  nil)=
- Initargs: input-function
- Allocation: instance


# link target 2: <<window-input-cursor>>
# link target: <<slot window-input-cursor>>


****** Slot: =window-input-cursor=                                               :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-input-history-position>>
# link target: <<slot window-input-history-position>>


****** Slot: =window-input-history-position=                                     :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-input-history>>
# link target: <<slot window-input-history>>


****** Slot: =window-input-history=                                              :slot:

- Value type: =t=
- Initial value: =(list "")=
- Initargs: none
- Allocation: instance


# link target 2: <<window-input-rendered>>
# link target: <<slot window-input-rendered>>


****** Slot: =window-input-rendered=                                             :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-input-string>>
# link target: <<slot window-input-string>>


****** Slot: =window-input-string=                                               :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-input-active..3f..>>
# link target: <<slot window-input-active..3f..>>


****** Slot: =window-input-active?=                                              :slot:

- Value type: =member=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-input-background>>
# link target: <<slot window-input-background>>


****** Slot: =window-input-background=                                           :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: input-bg
- Allocation: instance


# link target 2: <<window-input-foreground>>
# link target: <<slot window-input-foreground>>


****** Slot: =window-input-foreground=                                           :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: input-fg
- Allocation: instance


# link target 2: <<window-prompt-background>>
# link target: <<slot window-prompt-background>>


****** Slot: =window-prompt-background=                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: prompt-bg
- Allocation: instance


# link target 2: <<window-prompt-foreground>>
# link target: <<slot window-prompt-foreground>>


****** Slot: =window-prompt-foreground=                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: prompt-fg
- Allocation: instance


# link target 2: <<window-prompt>>
# link target: <<slot window-prompt>>


****** Slot: =window-prompt=                                                     :slot:

- Value type: =t=
- Initial value: ="> "=
- Initargs: prompt
- Allocation: instance


# link target 2: <<window-raw-messages>>
# link target: <<slot window-raw-messages>>


****** Slot: =window-raw-messages=                                               :slot:

- Value type: =t=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-max-messages>>
# link target: <<slot window-max-messages>>


****** Slot: =window-max-messages=                                               :slot:

- Value type: =t=
- Initial value: =100=
- Initargs: none
- Allocation: instance


# link target 2: <<window-show-tail-by-default..3f..>>
# link target: <<slot window-show-tail-by-default..3f..>>


****** Slot: =window-show-tail-by-default?=                                      :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-summon-mouse-on-raise..3f..>>
# link target: <<slot window-summon-mouse-on-raise..3f..>>


****** Slot: =window-summon-mouse-on-raise?=                                     :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: summon-mouse-on-raise?
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..terminal-window..3e..>>
# link target: <<class ..3c..terminal-window..3e..>>


**** Class: =<terminal-window>=                                               :class:


***** Inheritance

- Parent classes:
    [[class ..3c..log-window..3e..][<log-window>]]
- Precedence list:
    [[class ..3c..terminal-window..3e..][<terminal-window>]], [[class ..3c..log
    window..3e..][<log-window>]], [[class ..3c..list-window..3e..][<list-window>]],
    [[class ..3c..window..3e..][<window>]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..simple-prompt-window..3e..][<simple-prompt-window>]]


***** Description

Not documented.


***** Direct Slots

# link target 2: <<window-show-tail-by-default..3f..>>
# link target: <<slot window-show-tail-by-default..3f..>>


****** Slot: =window-show-tail-by-default?=                                      :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-prompt>>
# link target: <<slot window-prompt>>


****** Slot: =window-prompt=                                                     :slot:

- Value type: =t=
- Initial value: ="> "=
- Initargs: prompt
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-prompt>>
# link target: <<slot-accessor window-prompt>>


******** Slot Accessor: =window-prompt=                                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-prompt object)
#+END_EXAMPLE


********* Methods

- (=window-prompt= (<terminal-window>                   [[class ..3c..terminal
  window..3e..][=dormouse:<terminal-window>=]]))
- (=window-prompt= (<yes/no-window>                   [[class ..3c..yes..2f..no
  window..3e..][=dormouse:<yes/no-window>=]]))





# link target 2: <<window-prompt-foreground>>
# link target: <<slot window-prompt-foreground>>


****** Slot: =window-prompt-foreground=                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: prompt-fg
- Allocation: instance


# link target 2: <<window-prompt-background>>
# link target: <<slot window-prompt-background>>


****** Slot: =window-prompt-background=                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: prompt-bg
- Allocation: instance


# link target 2: <<window-input-foreground>>
# link target: <<slot window-input-foreground>>


****** Slot: =window-input-foreground=                                           :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: input-fg
- Allocation: instance


# link target 2: <<window-input-background>>
# link target: <<slot window-input-background>>


****** Slot: =window-input-background=                                           :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: input-bg
- Allocation: instance


# link target 2: <<window-echo-input..3f..>>
# link target: <<slot window-echo-input..3f..>>


****** Slot: =window-echo-input?=                                                :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: echo-input?
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-echo-input..3f..>>
# link target: <<slot-accessor window-echo-input..3f..>>


******** Slot Accessor: =window-echo-input?=                              :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-echo-input? object)
#+END_EXAMPLE


********* Methods

- (=window-echo-input?= (<terminal-window>                        [[class
  ..3c..terminal-window..3e..][=dormouse:<terminal-window>=]]))





# link target 2: <<window-input-active..3f..>>
# link target: <<slot window-input-active..3f..>>


****** Slot: =window-input-active?=                                              :slot:

- Value type: =member=
- Initial value: =t=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-input-active..3f..>>
# link target: <<slot-accessor window-input-active..3f..>>


******** Slot Accessor: =window-input-active?=                            :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-input-active? object)
#+END_EXAMPLE


********* Methods

- (=window-input-active?= (<terminal-window>                          [[class
  ..3c..terminal-window..3e..][=dormouse:<terminal-window>=]]))





# link target 2: <<window-input-string>>
# link target: <<slot window-input-string>>


****** Slot: =window-input-string=                                               :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-input-string>>
# link target: <<slot-accessor window-input-string>>


******** Slot Accessor: =window-input-string=                             :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-input-string object)
#+END_EXAMPLE


********* Methods

- (=window-input-string= (<terminal-window>                         [[class
  ..3c..terminal-window..3e..][=dormouse:<terminal-window>=]]))





# link target 2: <<window-input-rendered>>
# link target: <<slot window-input-rendered>>


****** Slot: =window-input-rendered=                                             :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-input-history>>
# link target: <<slot window-input-history>>


****** Slot: =window-input-history=                                              :slot:

- Value type: =t=
- Initial value: =(list "")=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-input-history>>
# link target: <<slot-accessor window-input-history>>


******** Slot Accessor: =window-input-history=                            :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-input-history object)
#+END_EXAMPLE


********* Methods

- (=window-input-history= (<terminal-window>                          [[class
  ..3c..terminal-window..3e..][=dormouse:<terminal-window>=]]))





# link target 2: <<window-input-history-position>>
# link target: <<slot window-input-history-position>>


****** Slot: =window-input-history-position=                                     :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-input-history-position>>
# link target: <<slot-accessor window-input-history-position>>


******** Slot Accessor: =window-input-history-position=                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-input-history-position object)
#+END_EXAMPLE


********* Methods

- (=window-input-history-position= (<terminal-window>
          [[class ..3c..terminal-window..3e..][=dormouse:<terminal-window>=]]))





# link target 2: <<window-input-cursor>>
# link target: <<slot window-input-cursor>>


****** Slot: =window-input-cursor=                                               :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-input-cursor>>
# link target: <<slot-accessor window-input-cursor>>


******** Slot Accessor: =window-input-cursor=                             :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-input-cursor object)
#+END_EXAMPLE


********* Methods

- (=window-input-cursor= (<terminal-window>                         [[class
  ..3c..terminal-window..3e..][=dormouse:<terminal-window>=]]))





# link target 2: <<window-input-function>>
# link target: <<slot window-input-function>>


****** Slot: =window-input-function=                                             :slot:

- Value type: =t=
- Initial value: =(lambda (dormouse::win dormouse::str)
  (declare (ignore dormouse::win dormouse::str))
                  nil)=
- Initargs: input-function
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-input-function>>
# link target: <<slot-accessor window-input-function>>


******** Slot Accessor: =window-input-function=                           :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-input-function object)
#+END_EXAMPLE


********* Methods

- (=window-input-function= (<terminal-window>                           [[class
  ..3c..terminal-window..3e..][=dormouse:<terminal-window>=]]))







***** Indirect Slots

# link target 2: <<window-raw-messages>>
# link target: <<slot window-raw-messages>>


****** Slot: =window-raw-messages=                                               :slot:

- Value type: =t=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-max-messages>>
# link target: <<slot window-max-messages>>


****** Slot: =window-max-messages=                                               :slot:

- Value type: =t=
- Initial value: =100=
- Initargs: none
- Allocation: instance


# link target 2: <<window-cursor>>
# link target: <<slot window-cursor>>


****** Slot: =window-cursor=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-offset>>
# link target: <<slot window-offset>>


****** Internal Slot: =window-offset=                                            :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: offset
- Allocation: instance


# link target 2: <<window-items>>
# link target: <<slot window-items>>


****** Internal Slot: =window-items=                                             :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..tooltip-window..3e..>>
# link target: <<class ..3c..tooltip-window..3e..>>


**** Class: =<tooltip-window>=                                                :class:


***** Inheritance

- Parent classes:
    [[class ..3c..dialog-window..3e..][<dialog-window>]]
- Precedence list:
    [[class ..3c..tooltip-window..3e..][<tooltip-window>]], [[class ..3c..dialog
    window..3e..][<dialog-window>]], [[class ..3c..window..3e..][<window>]],
    [[class standard-object][standard-object]], [[class slot-object][slot-object]],
    [[class t][t]]
- Direct subclasses:
    [[class ..3c..statistics-window..3e..][<statistics-window>]], [[class
    ..3c..mytooltip-window..3e..][<mytooltip-window>]]


***** Description

Window which displays floating 'tooltips' next to the mouse when hovering over
certain window regions.


***** Direct Slots

# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<floating-window>>
# link target: <<slot floating-window>>


****** Slot: =floating-window=                                                   :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<floating-window>>
# link target: <<slot-accessor floating-window>>


******** Slot Accessor: =floating-window=                                 :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(floating-window object)
#+END_EXAMPLE


********* Methods

- (=floating-window= (<tooltip-window>                     [[class
  ..3c..tooltip-window..3e..][=dormouse:<tooltip-window>=]]))







***** Indirect Slots

# link target 2: <<dialog-console>>
# link target: <<slot dialog-console>>


****** Slot: =dialog-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..viewport..3e..>>
# link target: <<class ..3c..viewport..3e..>>


**** Class: =<viewport>=                                                      :class:


***** Inheritance

- Parent classes:
    [[class ..3c..window..3e..][<window>]]
- Precedence list:
    [[class ..3c..viewport..3e..][<viewport>]], [[class
    ..3c..window..3e..][<window>]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..myviewport..3e..][<myviewport>]]


***** Description

Window that looks onto a 'map' console, which is usually larger than the
viewport, but can be the same size or even smaller.


***** Direct Slots

# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =t=
- Initial value: =dormouse:+opaque+=
- Initargs: none
- Allocation: instance


# link target 2: <<map-console>>
# link target: <<slot map-console>>


****** Slot: =map-console=                                                       :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<map-console>>
# link target: <<slot-accessor map-console>>


******** Slot Accessor: =map-console=                                     :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(map-console object)
#+END_EXAMPLE


********* Methods

- (=map-console= (<viewport>                 [[class
  ..3c..viewport..3e..][=dormouse:<viewport>=]]))





# link target 2: <<window-make-map..3f..>>
# link target: <<slot window-make-map..3f..>>


****** Slot: =window-make-map?=                                                  :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: make-map?
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-make-map..3f..>>
# link target: <<slot-accessor window-make-map..3f..>>


******** Slot Accessor: =window-make-map?=                                :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-make-map? object)
#+END_EXAMPLE


********* Methods

- (=window-make-map?= (<viewport>                      [[class
  ..3c..viewport..3e..][=dormouse:<viewport>=]]))





# link target 2: <<window-map-shared>>
# link target: <<slot window-map-shared>>


****** Slot: =window-map-shared=                                                 :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-map-shared>>
# link target: <<slot-accessor window-map-shared>>


******** Slot Accessor: =window-map-shared=                               :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-map-shared object)
#+END_EXAMPLE


********* Methods

- (=window-map-shared= (<viewport>                       [[class
  ..3c..viewport..3e..][=dormouse:<viewport>=]]))





# link target 2: <<map-xdim>>
# link target: <<slot map-xdim>>


****** Slot: =map-xdim=                                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: map-xdim
- Allocation: instance


******* Accessors

-----

# link target 2: <<map-xdim>>
# link target: <<slot-accessor map-xdim>>


******** Slot Accessor: =map-xdim=                                        :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(map-xdim object)
#+END_EXAMPLE


********* Methods

- (=map-xdim= (<viewport> [[class
  ..3c..viewport..3e..][=dormouse:<viewport>=]]))





# link target 2: <<map-ydim>>
# link target: <<slot map-ydim>>


****** Slot: =map-ydim=                                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: map-ydim
- Allocation: instance


******* Accessors

-----

# link target 2: <<map-ydim>>
# link target: <<slot-accessor map-ydim>>


******** Slot Accessor: =map-ydim=                                        :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(map-ydim object)
#+END_EXAMPLE


********* Methods

- (=map-ydim= (<viewport> [[class
  ..3c..viewport..3e..][=dormouse:<viewport>=]]))





# link target 2: <<view-tlx>>
# link target: <<slot view-tlx>>


****** Slot: =view-tlx=                                                          :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<view-tlx>>
# link target: <<slot-accessor view-tlx>>


******** Slot Accessor: =view-tlx=                                        :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(view-tlx object)
#+END_EXAMPLE


********* Methods

- (=view-tlx= (<viewport> [[class
  ..3c..viewport..3e..][=dormouse:<viewport>=]]))





# link target 2: <<view-tly>>
# link target: <<slot view-tly>>


****** Slot: =view-tly=                                                          :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<view-tly>>
# link target: <<slot-accessor view-tly>>


******** Slot Accessor: =view-tly=                                        :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(view-tly object)
#+END_EXAMPLE


********* Methods

- (=view-tly= (<viewport> [[class
  ..3c..viewport..3e..][=dormouse:<viewport>=]]))







***** Indirect Slots

# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..window-theme..3e..>>
# link target: <<class ..3c..window-theme..3e..>>


**** Class: =<window-theme>=                                                  :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class ..3c..window-theme..3e..][<window-theme>]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Object containing global appearance information, which all windows
will use unless overridden.


***** Direct Slots

# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =t=
- Initial value: =:white=
- Initargs: foreground
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-foreground>>
# link target: <<slot-accessor window-foreground>>


******** Slot Accessor: =window-foreground=                               :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-foreground object)
#+END_EXAMPLE


********* Methods

- (=window-foreground= (win [[class ..3c..window..3e..][=dormouse:<window>=]]))
- (=window-foreground= (<window-theme>                       [[class
  ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =:dark-slate-gray=
- Initargs: background
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-background>>
# link target: <<slot-accessor window-background>>


******** Slot Accessor: =window-background=                               :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-background object)
#+END_EXAMPLE


********* Methods

- (=window-background= (win [[class ..3c..window..3e..][=dormouse:<window>=]]))
- (=window-background= (<window-theme>                       [[class
  ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =t=
- Initial value: =:black=
- Initargs: highlight-fg
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-highlight-foreground>>
# link target: <<slot-accessor window-highlight-foreground>>


******** Slot Accessor: =window-highlight-foreground=                     :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-highlight-foreground object)
#+END_EXAMPLE


********* Methods

- (=window-highlight-foreground= (win                                 [[class
  ..3c..window..3e..][=dormouse:<window>=]]))
- (=window-highlight-foreground= (<window-theme>
   [[class ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =:white=
- Initargs: highlight-bg
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-highlight-background>>
# link target: <<slot-accessor window-highlight-background>>


******** Slot Accessor: =window-highlight-background=                     :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-highlight-background object)
#+END_EXAMPLE


********* Methods

- (=window-highlight-background= (win                                 [[class
  ..3c..window..3e..][=dormouse:<window>=]]))
- (=window-highlight-background= (<window-theme>
   [[class ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<dialog-button-foreground>>
# link target: <<slot dialog-button-foreground>>


****** Slot: =dialog-button-foreground=                                          :slot:

- Value type: =keyword=
- Initial value: =:black=
- Initargs: dialog-button-foreground
- Allocation: instance


******* Accessors

-----

# link target 2: <<dialog-button-foreground>>
# link target: <<slot-accessor dialog-button-foreground>>


******** Slot Accessor: =dialog-button-foreground=                        :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(dialog-button-foreground object)
#+END_EXAMPLE


********* Methods

- (=dialog-button-foreground= (<window-theme>
  [[class ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<dialog-button-background>>
# link target: <<slot dialog-button-background>>


****** Slot: =dialog-button-background=                                          :slot:

- Value type: =keyword=
- Initial value: =:light-grey=
- Initargs: dialog-button-background
- Allocation: instance


******* Accessors

-----

# link target 2: <<dialog-button-background>>
# link target: <<slot-accessor dialog-button-background>>


******** Slot Accessor: =dialog-button-background=                        :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(dialog-button-background object)
#+END_EXAMPLE


********* Methods

- (=dialog-button-background= (<window-theme>
  [[class ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<hyperlink-foreground-colour>>
# link target: <<slot hyperlink-foreground-colour>>


****** Slot: =hyperlink-foreground-colour=                                       :slot:

- Value type: =keyword=
- Initial value: =:light-blue=
- Initargs: hyperlink-fg
- Allocation: instance


******* Accessors

-----

# link target 2: <<hyperlink-foreground-colour>>
# link target: <<slot-accessor hyperlink-foreground-colour>>


******** Slot Accessor: =hyperlink-foreground-colour=                     :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(hyperlink-foreground-colour object)
#+END_EXAMPLE


********* Methods

- (=hyperlink-foreground-colour= (win                                 [[class
  ..3c..hypertext-window..3e..][=dormouse:<hypertext-window>=]]))
- (=hyperlink-foreground-colour= (<window-theme>
   [[class ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<window-prompt-foreground>>
# link target: <<slot window-prompt-foreground>>


****** Slot: =window-prompt-foreground=                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: prompt-fg
- Allocation: instance


# link target 2: <<window-prompt-background>>
# link target: <<slot window-prompt-background>>


****** Slot: =window-prompt-background=                                          :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: prompt-bg
- Allocation: instance


# link target 2: <<window-input-foreground>>
# link target: <<slot window-input-foreground>>


****** Slot: =window-input-foreground=                                           :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: input-fg
- Allocation: instance


# link target 2: <<window-input-background>>
# link target: <<slot window-input-background>>


****** Slot: =window-input-background=                                           :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: input-bg
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: framed?
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-framed..3f..>>
# link target: <<slot-accessor window-framed..3f..>>


******** Slot Accessor: =window-framed?=                                  :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-framed? object)
#+END_EXAMPLE


********* Methods

- (=window-framed?= (win [[class ..3c..window..3e..][=dormouse:<window>=]]))
- (=window-framed?= (<window-theme>                    [[class ..3c..window
  theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =25=
- Initargs: transparency
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-transparency>>
# link target: <<slot-accessor window-transparency>>


******** Slot Accessor: =window-transparency=                             :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-transparency object)
#+END_EXAMPLE


********* Methods

- (=window-transparency= (win [[class
  ..3c..window..3e..][=dormouse:<window>=]]))
- (=window-transparency= (<window-theme>                         [[class
  ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))





# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =dormouse:+dimmed+=
- Initargs: transparency-unfocussed
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot-accessor window-transparency-unfocussed>>


******** Slot Accessor: =window-transparency-unfocussed=                  :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-transparency-unfocussed object)
#+END_EXAMPLE


********* Methods

- (=window-transparency-unfocussed= (win
  [[class ..3c..window..3e..][=dormouse:<window>=]]))
- (=window-transparency-unfocussed= (<window-theme>
         [[class ..3c..window-theme..3e..][=dormouse:<window-theme>=]]))








-----

# link target 2: <<..3c..window-with-context-menu..3e..>>
# link target: <<class ..3c..window-with-context-menu..3e..>>


**** Class: =<window-with-context-menu>=                                      :class:


***** Inheritance

- Parent classes:
    [[class ..3c..window..3e..][<window>]]
- Precedence list:
    [[class ..3c..window-with-context-menu..3e..][<window-with-context-menu>]],
    [[class ..3c..window..3e..][<window>]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Window where right-clicking brings up a menu of commands that the user
can choose to apply to the item that was clicked on.


***** Direct Slots

# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<context-menu>>
# link target: <<slot context-menu>>


****** Slot: =context-menu=                                                      :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<context-menu>>
# link target: <<slot-accessor context-menu>>


******** Slot Accessor: =context-menu=                                    :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(context-menu object)
#+END_EXAMPLE


********* Methods

- (=context-menu= (<window-with-context-menu>                  [[class
  ..3c..window-with-context-menu..3e..][=dormouse:<window-with-context
  menu>=]]))





# link target 2: <<context-menu-class>>
# link target: <<slot context-menu-class>>


****** Slot: =context-menu-class=                                                :slot:

- Value type: =t=
- Initial value: ='dormouse::<context-menu>=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<context-menu-class>>
# link target: <<slot-accessor context-menu-class>>


******** Slot Accessor: =context-menu-class=                              :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(context-menu-class object)
#+END_EXAMPLE


********* Methods

- (=context-menu-class= (<window-with-context-menu>
  [[class ..3c..window-with-context-menu..3e..][=dormouse:<window-with-context
  menu>=]]))





# link target 2: <<context-menu-initargs>>
# link target: <<slot context-menu-initargs>>


****** Slot: =context-menu-initargs=                                             :slot:

- Value type: =t=
- Initial value: =dormouse::+default-context-menu-initargs+=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<context-menu-initargs>>
# link target: <<slot-accessor context-menu-initargs>>


******** Slot Accessor: =context-menu-initargs=                           :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(context-menu-initargs object)
#+END_EXAMPLE


********* Methods

- (=context-menu-initargs= (<window-with-context-menu>
   [[class ..3c..window-with-context-menu..3e..][=dormouse:<window-with-context
  menu>=]]))







***** Indirect Slots

# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance





-----

# link target 2: <<..3c..window..3e..>>
# link target: <<class ..3c..window..3e..>>


**** Class: =<window>=                                                        :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class ..3c..window..3e..][<window>]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class ..3c..viewport..3e..][<viewport>]], [[class ..3c..dialog
    window..3e..][<dialog-window>]], [[class ..3c..window-with-context
    menu..3e..][<window-with-context-menu>]], [[class ..3c..list
    window..3e..][<list-window>]], [[class ..3c..meter-window..3e..][<meter
    window>]], [[class ..3c..background-window..3e..][<background-window>]],
    [[class ..3c..ghost-window..3e..][<ghost-window>]], [[class ..3c..modal
    window..3e..][<modal-window>]]

***** Description: Class whose instances represent windows on

the screen.
***** Examples: TODO

***** See Also:


***** Direct Slots

# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tlx
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-tlx>>
# link target: <<slot-accessor window-tlx>>


******** Slot Accessor: =window-tlx=                                      :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-tlx object)
#+END_EXAMPLE


********* Methods

- (=window-tlx= (<window> [[class ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =or=
- Initial value: =0=
- Initargs: tly
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-tly>>
# link target: <<slot-accessor window-tly>>


******** Slot Accessor: =window-tly=                                      :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-tly object)
#+END_EXAMPLE


********* Methods

- (=window-tly= (<window> [[class ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: width
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-width>>
# link target: <<slot-accessor window-width>>


******** Slot Accessor: =window-width=                                    :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-width object)
#+END_EXAMPLE


********* Methods

- (=window-width= (<window> [[class ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: height
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-height>>
# link target: <<slot-accessor window-height>>


******** Slot Accessor: =window-height=                                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-height object)
#+END_EXAMPLE


********* Methods

- (=window-height= (<window> [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-console>>
# link target: <<slot-accessor window-console>>


******** Slot Accessor: =window-console=                                  :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-console object)
#+END_EXAMPLE


********* Methods

- (=window-console= (<window> [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-children>>
# link target: <<slot-accessor window-children>>


******** Slot Accessor: =window-children=                                 :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-children object)
#+END_EXAMPLE


********* Methods

- (=window-children= (<window> [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot-accessor window-raise-children-with-parent..3f..>>


******** Slot Accessor: =window-raise-children-with-parent?=              :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-raise-children-with-parent? object)
#+END_EXAMPLE


********* Methods

- (=window-raise-children-with-parent?= (<window>
           [[class ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: auto-redraw?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-auto-redraw-time>>
# link target: <<slot-accessor window-auto-redraw-time>>


******** Slot Accessor: =window-auto-redraw-time=                         :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-auto-redraw-time object)
#+END_EXAMPLE


********* Methods

- (=window-auto-redraw-time= (<window>                             [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-can-resize..3f..>>
# link target: <<slot-accessor window-can-resize..3f..>>


******** Slot Accessor: =window-can-resize?=                              :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-can-resize? object)
#+END_EXAMPLE


********* Methods

- (=window-can-resize?= (<window>                        [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-can-drag..3f..>>
# link target: <<slot-accessor window-can-drag..3f..>>


******** Slot Accessor: =window-can-drag?=                                :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-can-drag? object)
#+END_EXAMPLE


********* Methods

- (=window-can-drag?= (<window> [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-can-close..3f..>>
# link target: <<slot-accessor window-can-close..3f..>>


******** Slot Accessor: =window-can-close?=                               :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-can-close? object)
#+END_EXAMPLE


********* Methods

- (=window-can-close?= (<window>                       [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot-accessor window-ephemeral..3f..>>


******** Slot Accessor: =window-ephemeral?=                               :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-ephemeral? object)
#+END_EXAMPLE


********* Methods

- (=window-ephemeral?= (<window>                       [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-draw-function>>
# link target: <<slot-accessor window-draw-function>>


******** Slot Accessor: =window-draw-function=                            :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-draw-function object)
#+END_EXAMPLE


********* Methods

- (=window-draw-function= (<window>                          [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-event-handler>>
# link target: <<slot-accessor window-event-handler>>


******** Slot Accessor: =window-event-handler=                            :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-event-handler object)
#+END_EXAMPLE


********* Methods

- (=window-event-handler= (<window>                          [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: title
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-title>>
# link target: <<slot-accessor window-title>>


******** Slot Accessor: =window-title=                                    :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-title object)
#+END_EXAMPLE


********* Methods

- (=window-title= (win                  [[class ..3c..hypertext
  window..3e..][=dormouse:<hypertext-window>=]]))
- (=window-title= (<window> [[class ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-hidden..3f..>>
# link target: <<slot-accessor window-hidden..3f..>>


******** Slot Accessor: =window-hidden?=                                  :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-hidden? object)
#+END_EXAMPLE


********* Methods

- (=window-hidden?= (<window> [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-changed..3f..>>
# link target: <<slot-accessor window-changed..3f..>>


******** Slot Accessor: =window-changed?=                                 :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-changed? object)
#+END_EXAMPLE


********* Methods

- (=window-changed?= (<window> [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-last-update-time>>
# link target: <<slot-accessor window-last-update-time>>


******** Slot Accessor: =window-last-update-time=                         :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-last-update-time object)
#+END_EXAMPLE


********* Methods

- (=window-last-update-time= (<window>                             [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-alive..3f..>>
# link target: <<slot-accessor window-alive..3f..>>


******** Slot Accessor: =window-alive?=                                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-alive? object)
#+END_EXAMPLE


********* Methods

- (=window-alive?= (<window> [[class
  ..3c..window..3e..][=dormouse:<window>=]]))





# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-touching>>
# link target: <<slot-accessor window-touching>>


******** Slot Accessor: =window-touching=                                 :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-touching object)
#+END_EXAMPLE


********* Methods

- (=window-touching= (<window> [[class
  ..3c..window..3e..][=dormouse:<window>=]]))








-----

# link target 2: <<..3c..yes..2f..no-window..3e..>>
# link target: <<class ..3c..yes..2f..no-window..3e..>>


**** Class: =<yes/no-window>=                                                 :class:


***** Inheritance

- Parent classes:
    [[class ..3c..modal-window..3e..][<modal-window>]], [[class ..3c..dialog
    window..3e..][<dialog-window>]]
- Precedence list:
    [[class ..3c..yes..2f..no-window..3e..][<yes/no-window>]], [[class ..3c..modal
    window..3e..][<modal-window>]], [[class ..3c..dialog-window..3e..][<dialog
    window>]], [[class ..3c..window..3e..][<window>]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Modal dialog window that waits for the user to click
on (yes) or (no) or to press Y or N.


***** Direct Slots

# link target 2: <<window-title>>
# link target: <<slot window-title>>


****** Slot: =window-title=                                                      :slot:

- Value type: =t=
- Initial value: ="Yes or No"=
- Initargs: none
- Allocation: instance


# link target 2: <<window-prompt>>
# link target: <<slot window-prompt>>


****** Slot: =window-prompt=                                                     :slot:

- Value type: =t=
- Initial value: ="Yes or No"=
- Initargs: prompt
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-prompt>>
# link target: <<slot-accessor window-prompt>>


******** Slot Accessor: =window-prompt=                                   :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-prompt object)
#+END_EXAMPLE


********* Methods

- (=window-prompt= (<terminal-window>                   [[class ..3c..terminal
  window..3e..][=dormouse:<terminal-window>=]]))
- (=window-prompt= (<yes/no-window>                   [[class ..3c..yes..2f..no
  window..3e..][=dormouse:<yes/no-window>=]]))





# link target 2: <<window-tlx>>
# link target: <<slot window-tlx>>


****** Slot: =window-tlx=                                                        :slot:

- Value type: =t=
- Initial value: =30=
- Initargs: none
- Allocation: instance


# link target 2: <<window-tly>>
# link target: <<slot window-tly>>


****** Slot: =window-tly=                                                        :slot:

- Value type: =t=
- Initial value: =20=
- Initargs: none
- Allocation: instance


# link target 2: <<window-width>>
# link target: <<slot window-width>>


****** Slot: =window-width=                                                      :slot:

- Value type: =t=
- Initial value: =30=
- Initargs: none
- Allocation: instance


# link target 2: <<window-height>>
# link target: <<slot window-height>>


****** Slot: =window-height=                                                     :slot:

- Value type: =t=
- Initial value: =5=
- Initargs: none
- Allocation: instance


# link target 2: <<window-auto-redraw..3f..>>
# link target: <<slot window-auto-redraw..3f..>>


****** Slot: =window-auto-redraw?=                                               :slot:

- Value type: =t=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-choice-function>>
# link target: <<slot window-choice-function>>


****** Slot: =window-choice-function=                                            :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: choice-function
- Allocation: instance


******* Accessors

-----

# link target 2: <<window-choice-function>>
# link target: <<slot-accessor window-choice-function>>


******** Slot Accessor: =window-choice-function=                          :reader:writer:


********* Syntax

#+BEGIN_EXAMPLE
(window-choice-function object)
#+END_EXAMPLE


********* Methods

- (=window-choice-function= (<yes/no-window>                            [[class
  ..3c..yes..2f..no-window..3e..][=dormouse:<yes/no-window>=]]))







***** Indirect Slots

# link target 2: <<window-summon-mouse-on-raise..3f..>>
# link target: <<slot window-summon-mouse-on-raise..3f..>>


****** Slot: =window-summon-mouse-on-raise?=                                     :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: summon-mouse-on-raise?
- Allocation: instance


# link target 2: <<dialog-console>>
# link target: <<slot dialog-console>>


****** Slot: =dialog-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-touching>>
# link target: <<slot window-touching>>


****** Slot: =window-touching=                                                   :slot:

- Value type: =list=
- Initial value: =(list)=
- Initargs: none
- Allocation: instance


# link target 2: <<window-alive..3f..>>
# link target: <<slot window-alive..3f..>>


****** Slot: =window-alive?=                                                     :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-last-update-time>>
# link target: <<slot window-last-update-time>>


****** Slot: =window-last-update-time=                                           :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<window-changed..3f..>>
# link target: <<slot window-changed..3f..>>


****** Slot: =window-changed?=                                                   :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-hidden..3f..>>
# link target: <<slot window-hidden..3f..>>


****** Slot: =window-hidden?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<window-transparency-unfocussed>>
# link target: <<slot window-transparency-unfocussed>>


****** Slot: =window-transparency-unfocussed=                                    :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: transparency-unfocussed
- Allocation: instance


# link target 2: <<window-transparency>>
# link target: <<slot window-transparency>>


****** Slot: =window-transparency=                                               :slot:

- Value type: =integer=
- Initial value: =nil=
- Initargs: transparency
- Allocation: instance


# link target 2: <<window-event-handler>>
# link target: <<slot window-event-handler>>


****** Slot: =window-event-handler=                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: event-handler
- Allocation: instance


# link target 2: <<window-draw-function>>
# link target: <<slot window-draw-function>>


****** Slot: =window-draw-function=                                              :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: draw
- Allocation: instance


# link target 2: <<window-ephemeral..3f..>>
# link target: <<slot window-ephemeral..3f..>>


****** Slot: =window-ephemeral?=                                                 :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: ephemeral?
- Allocation: instance


# link target 2: <<window-can-close..3f..>>
# link target: <<slot window-can-close..3f..>>


****** Slot: =window-can-close?=                                                 :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-close?
- Allocation: instance


# link target 2: <<window-can-drag..3f..>>
# link target: <<slot window-can-drag..3f..>>


****** Slot: =window-can-drag?=                                                  :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-drag?
- Allocation: instance


# link target 2: <<window-can-resize..3f..>>
# link target: <<slot window-can-resize..3f..>>


****** Slot: =window-can-resize?=                                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: can-resize?
- Allocation: instance


# link target 2: <<window-framed..3f..>>
# link target: <<slot window-framed..3f..>>


****** Slot: =window-framed?=                                                    :slot:

- Value type: =boolean=
- Initial value: =nil=
- Initargs: framed?
- Allocation: instance


# link target 2: <<window-auto-redraw-time>>
# link target: <<slot window-auto-redraw-time>>


****** Slot: =window-auto-redraw-time=                                           :slot:

- Value type: =or=
- Initial value: =nil=
- Initargs: auto-redraw-time
- Allocation: instance


# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<slot window-raise-children-with-parent..3f..>>


****** Slot: =window-raise-children-with-parent?=                                :slot:

- Value type: =boolean=
- Initial value: =t=
- Initargs: none
- Allocation: instance


# link target 2: <<window-children>>
# link target: <<slot window-children>>


****** Slot: =window-children=                                                   :slot:

- Value type: =list=
- Initial value: =nil=
- Initargs: children
- Allocation: instance


# link target 2: <<window-highlight-background>>
# link target: <<slot window-highlight-background>>


****** Slot: =window-highlight-background=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-bg
- Allocation: instance


# link target 2: <<window-highlight-foreground>>
# link target: <<slot window-highlight-foreground>>


****** Slot: =window-highlight-foreground=                                       :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: highlight-fg
- Allocation: instance


# link target 2: <<window-background>>
# link target: <<slot window-background>>


****** Slot: =window-background=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: background
- Allocation: instance


# link target 2: <<window-foreground>>
# link target: <<slot window-foreground>>


****** Slot: =window-foreground=                                                 :slot:

- Value type: =keyword=
- Initial value: =nil=
- Initargs: foreground
- Allocation: instance


# link target 2: <<window-console>>
# link target: <<slot window-console>>


****** Slot: =window-console=                                                    :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: console
- Allocation: instance







*** External Structures

-----

# link target 2: <<list-item>>
# link target: <<structure list-item>>


**** Structure: =list-item=                                               :structure:

***** Description: TODO


***** Slots

# link target 2: <<str>>
# link target: <<slot str>>


****** Slot: =str=                                                               :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<item>>
# link target: <<slot item>>


****** Slot: =item=                                                              :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance


# link target 2: <<hotkey>>
# link target: <<slot hotkey>>


****** Slot: =hotkey=                                                            :slot:

- Value type: =t=
- Initial value: =nil=
- Initargs: none
- Allocation: instance







*** External Constants

-----

# link target 2: <<..2b..dimmed..2b..>>
# link target: <<constant ..2b..dimmed..2b..>>


**** Constant: =+dimmed+=                                                  :constant:


***** Value

: 75

Type: =integer=


***** Description

Value of =WINDOW-TRANSPARENCY= for a window that is dimmed.



-----

# link target 2: <<..2b..invisible..2b..>>
# link target: <<constant ..2b..invisible..2b..>>


**** Constant: =+invisible+=                                               :constant:


***** Value

: 100

Type: =integer=


***** Description

Value of =WINDOW-TRANSPARENCY= for a window that is completely
transparent (invisible).



-----

# link target 2: <<..2b..opaque..2b..>>
# link target: <<constant ..2b..opaque..2b..>>


**** Constant: =+opaque+=                                                  :constant:


***** Value

: 0

Type: =bit=


***** Description

Value of =WINDOW-TRANSPARENCY= for a window that is not at all
transparent.





*** External Global Variables

-----

# link target 2: <<*alt*>>
# link target: <<variable *alt*>>


**** Variable: =*alt*=                                                     :variable:


***** Value

: nil

Type: =null=


***** Description

Global variable which is set to =T= while the alt/meta key is being pressed,
and =NIL= when it is released.



-----

# link target 2: <<*ctrl*>>
# link target: <<variable *ctrl*>>


**** Variable: =*ctrl*=                                                    :variable:


***** Value

: nil

Type: =null=


***** Description

Global variable which is set to =T= while the ctrl key is being pressed,
and =NIL= while it is released.



-----

# link target 2: <<*exit-gui..3f..*>>
# link target: <<variable *exit-gui..3f..*>>


**** Variable: =*exit-gui?*=                                               :variable:


***** Value

: t

Type: =boolean=


***** Description

Setting this to non-nil will cause the GUI event-handling
loop to exit, and control to return to wherever the event-handling loop was
originally called from.



-----

# link target 2: <<*mouse-x*>>
# link target: <<variable *mouse-x*>>


**** Variable: =*mouse-x*=                                                 :variable:


***** Value

: 45

Type: =integer=


***** Description

Global variable set to the current absolute X-coordinate of the mouse
cursor, relative to the top left corner of the root console.



-----

# link target 2: <<*mouse-y*>>
# link target: <<variable *mouse-y*>>


**** Variable: =*mouse-y*=                                                 :variable:


***** Value

: 27

Type: =integer=


***** Description

Global variable set to the current absolute Y-coordinate of the mouse
cursor, relative to the top left corner of the root console.



-----

# link target 2: <<*shift*>>
# link target: <<variable *shift*>>


**** Variable: =*shift*=                                                   :variable:


***** Value

: nil

Type: =null=


***** Description

Global variable which is set to =T= while the shift key is being pressed,
and =NIL= while it is released.



-----

# link target 2: <<*window-stack*>>
# link target: <<variable *window-stack*>>


**** Variable: =*window-stack*=                                            :variable:


***** Value

: (#<dormouse:<hypertext-window> {2408BA01}>  #<dormouse:<dialog-window>
: {2424FC59}>  #<tcod.gui-demo::<mytooltip-window> {24202FC9}>
: #<dormouse:<filtered-window> {241F25B9}> #<dormouse:<window> {242E1EE1}>
: #<dormouse:<viewport> {24201111}> #<dormouse:<log-window> {24209D49}>
: #<dormouse:<terminal-window> {241BDC41}>  #<tcod.gui-demo::<statistics
: window> {2420A159}>
 #<tcod.gui-demo::<myviewport> {241F3539}>)

Type: =cons=


***** Description

Stack (list) of all existing non-hidden windows. The 'topmost' window is at
the top of the stack.



-----

# link target 2: <<*window-theme*>>
# link target: <<variable *window-theme*>>


**** Variable: =*window-theme*=                                            :variable:


***** Value

: #<dormouse:<window-theme> {242422F1}>

Type: =<window-theme>=


***** Description

Not documented.





*** External Macros

-----

# link target 2: <<do-for-windows-by-type>>
# link target: <<macro do-for-windows-by-type>>


**** Macro: =do-for-windows-by-type=                                          :macro:


***** Syntax

#+BEGIN_EXAMPLE
(do-for-windows-by-type (winvar wtype &key (include-hidden? nil))
  &body
  body)
#+END_EXAMPLE

***** Usage

: (do-for-windows-by-type (WIN WTYPE &key INCLUDE-HIDDEN?)
:     ...body...)
***** Arguments

- WINVAR :: a symbol.
- WTYPE :: symbol naming a subclass of [[..3c..window..3e..][<Window>]]
- include-hidden? :: boolean.
***** Description

Iterate through all existing windows that are of type =WTYPE=,
which must be a non-quoted symbol naming a class. If =INCLUDE-HIDDEN?= is true,
iterate through hidden as well as visible windows.

Within the body of the iteration, the symbol given as =WINVAR= is bound to each
successive window.

***** Example

#+BEGIN_EXAMPLE
 (do-for-windows-by-type (win <Message-Window>)
   (draw-string-at win 1 1 ``Here is a message.''))
#+END_EXAMPLE


-----

# link target 2: <<with-no-redraw>>
# link target: <<macro with-no-redraw>>


**** Macro: =with-no-redraw=                                                  :macro:


***** Syntax

#+BEGIN_EXAMPLE
(with-no-redraw win
  &body
  body)
#+END_EXAMPLE


***** Description

Execute BODY, and return its value as if it were a PROGN. Turn off all
automatic redrawing of windows while the body is executing.



-----

# link target 2: <<with-window-unchanged>>
# link target: <<macro with-window-unchanged>>


**** Macro: =with-window-unchanged=                                           :macro:


***** Syntax

#+BEGIN_EXAMPLE
(with-window-unchanged win
  &body
  body)
#+END_EXAMPLE


***** Description

Execute BODY, and return its value as if it were a PROGN. Before returning,
force (WINDOW-CHANGED? WIN) to be NIL.





*** External Functions

-----

# link target 2: <<add-browser-line>>
# link target: <<function add-browser-line>>


**** Function: =add-browser-line=                                          :function:


***** Syntax

#+BEGIN_EXAMPLE
(add-browser-line win line)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<add-item>>
# link target: <<function add-item>>


**** Function: =add-item=                                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(add-item win item str &optional k)
#+END_EXAMPLE


***** Description

Add an item to the end of the window's list.  ITEM is the
'value' of the item itself. It can be any lisp value.  STR is a string
representing ITEM, which is what is displayed in the window.  HOTKEY is an
optional hotkey which quickly selects the item.



-----

# link target 2: <<add-message>>
# link target: <<function add-message>>


**** Function: =add-message=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(add-message win fmt &rest args)
#+END_EXAMPLE


***** Description

Adds the string produced by calling (APPLY #'FORMAT nil
FMT ARGS) to the end of the message list, and moves the display so that the
tail of the list is visible (including the new message).



-----

# link target 2: <<add-message-and-redraw>>
# link target: <<function add-message-and-redraw>>


**** Function: =add-message-and-redraw=                                    :function:


***** Syntax

#+BEGIN_EXAMPLE
(add-message-and-redraw win fmt &rest args)
#+END_EXAMPLE


***** Description

Calls ADD-MESSAGE, then forces a redraw of WIN so
that the message is immediately visible.



-----

# link target 2: <<all-windows>>
# link target: <<function all-windows>>


**** Function: =all-windows=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(all-windows &key (except))
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<bar-chart>>
# link target: <<function bar-chart>>


**** Function: =bar-chart=                                                 :function:


***** Syntax

#+BEGIN_EXAMPLE
(bar-chart width num denom &key (text nil) (bar-colour red)
           (empty-bar-colour black) (text-colour white))
#+END_EXAMPLE


***** Description

Returns a colourised string which, when printed using
  draw-string-at, will produce a string of solid blocks
  WIDTH characters long, coloured BAR-COLOUR for NUM/DENOM * the string's
  length, and EMPTY-BAR-COLOUR for the rest of the string.

If TEXT is supplied, then some text will appear in the centre of the bar chart,
with a foreground colour of TEXT-COLOUR. Possible values for TEXT are:

- A string
- :FRACTION - ``NUM/DENOM''
- :PERCENT - a percentage calculated from NUM/DENOM * 100
- nil (default) - no text.

***** Example:

#+BEGIN_EXAMPLE
 (bar-chart 20 (hit-points *player*) (max-hit-points *player*)
    :text :fraction :text-colour :cornsilk)
#+END_EXAMPLE



-----

# link target 2: <<binding-..3e..key>>
# link target: <<function binding-..3e..key>>


**** Function: =binding->key=                                              :function:


***** Syntax

#+BEGIN_EXAMPLE
(binding->key binding)
#+END_EXAMPLE


***** Description

BINDING is a list of the form:
  (KEYCODE [:ctrl CTRL] [:alt ALT] [:shift SHIFT])
Where:
  -- KEYCODE is a character or a VK code
  -- SHIFT, CTRL and ALT are boolean values
Return the TCOD key structure that we expect to be produced when the key
combination described by BINDING is pressed.



-----

# link target 2: <<bottom-message>>
# link target: <<function bottom-message>>


**** Function: =bottom-message=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(bottom-message fmt &rest args)
#+END_EXAMPLE

***** Arguments:


- FMT: String, which may contain formatting directives for the Common
Lisp function FORMAT
 (see {http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm}.)
- ARGS: Zero or more arguments matching the formatting directives
in FMT.

***** Returns: None.


***** Description: Prints the string returned by (APPLY #'FORMAT NIL ARGS)

onto the bottom line of the root console.

***** Example:

#+BEGIN_EXAMPLE
 (bottom-message "Mouse position: (~D, ~D)" *mouse-x* *mouse-y*)
#+END_EXAMPLE


-----

# link target 2: <<button>>
# link target: <<function button>>


**** Function: =button=                                                    :function:


***** Syntax

#+BEGIN_EXAMPLE
(button data fmt &rest args)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<calculate-floating-window-width>>
# link target: <<function calculate-floating-window-width>>


**** Function: =calculate-floating-window-width=                           :function:


***** Syntax

#+BEGIN_EXAMPLE
(calculate-floating-window-width win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<centre-viewport-on>>
# link target: <<function centre-viewport-on>>


**** Function: =centre-viewport-on=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(centre-viewport-on win mapx mapy)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<character-..3e..shift>>
# link target: <<function character-..3e..shift>>


**** Function: =character->shift=                                          :function:


***** Syntax

#+BEGIN_EXAMPLE
(character->shift ch)
#+END_EXAMPLE


***** Description

Given a character CH, return the value of the 'SHIFT' field that is expected
when the key for that character is pressed by the user.



-----

# link target 2: <<character-..3e..vk>>
# link target: <<function character-..3e..vk>>


**** Function: =character->vk=                                             :function:


***** Syntax

#+BEGIN_EXAMPLE
(character->vk ch)
#+END_EXAMPLE


***** Description

Given a character =CH=, return the value of the 'VK' field that is expected
when the key for that character is pressed by the user.



-----

# link target 2: <<clear-browser-lines>>
# link target: <<function clear-browser-lines>>


**** Function: =clear-browser-lines=                                       :function:


***** Syntax

#+BEGIN_EXAMPLE
(clear-browser-lines win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<clear-filter>>
# link target: <<function clear-filter>>


**** Function: =clear-filter=                                              :function:


***** Syntax

#+BEGIN_EXAMPLE
(clear-filter win)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<clear-items>>
# link target: <<function clear-items>>


**** Function: =clear-items=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(clear-items win)
#+END_EXAMPLE


***** Description

Delete all items in the list belonging to WIN.



-----

# link target 2: <<clear-map>>
# link target: <<function clear-map>>


**** Function: =clear-map=                                                 :function:


***** Syntax

#+BEGIN_EXAMPLE
(clear-map win &key redraw &allow-other-keys)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<clear-messages>>
# link target: <<function clear-messages>>


**** Function: =clear-messages=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(clear-messages win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<colour>>
# link target: <<function colour>>


**** Function: =colour=                                                    :function:


***** Syntax

#+BEGIN_EXAMPLE
(colour keywd)
#+END_EXAMPLE


***** Description

Given a colour keyword such as :GREY, return its corresponding RGB
value (#xRRGGBB).



-----

# link target 2: <<colour>>
# link target: <<function colour>>


**** Function: =colour=                                                    :function:


***** Syntax

#+BEGIN_EXAMPLE
(colour keywd)
#+END_EXAMPLE


***** Description

Given a colour keyword such as :GREY, return its corresponding RGB
value (#xRRGGBB).



-----

# link target 2: <<coloured-string-length>>
# link target: <<function coloured-string-length>>


**** Function: =coloured-string-length=                                    :function:


***** Syntax

#+BEGIN_EXAMPLE
(coloured-string-length str)
#+END_EXAMPLE


***** Description

Return the number of printable characters in the string STR. In other words,
return the length of STR when formatting directives are excluded.



-----

# link target 2: <<colourise>>
# link target: <<function colourise>>


**** Function: =colourise=                                                 :function:


***** Syntax

#+BEGIN_EXAMPLE
(colourise val fg &optional bg)
#+END_EXAMPLE


***** Description

Given a value, return it as a string wrapped in directives for
  {defgeneric dormouse:write-to-window-at} which will make the value appear in
  colours FG[,BG] when written to the screen.



-----

# link target 2: <<command-from-context-menu>>
# link target: <<function command-from-context-menu>>


**** Function: =command-from-context-menu=                                 :function:


***** Syntax

#+BEGIN_EXAMPLE
(command-from-context-menu win command context-item)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<copy-windows-to-console>>
# link target: <<function copy-windows-to-console>>


**** Function: =copy-windows-to-console=                                   :function:


***** Syntax

#+BEGIN_EXAMPLE
(copy-windows-to-console window-list con)
#+END_EXAMPLE

***** Arguments:

- WINDOW-LIST: a list of instances of {defclass dormouse:<Window>}
- CON: a C console pointer.
***** Returns: None.

***** Description: Copy (draw) each window in WINDOW-LIST onto the console CON.

The FIRST window in the list is treated as the 'topmost' window and so
is copied LAST.


-----

# link target 2: <<cursor-moved-to-item>>
# link target: <<function cursor-moved-to-item>>


**** Function: =cursor-moved-to-item=                                      :function:


***** Syntax

#+BEGIN_EXAMPLE
(cursor-moved-to-item win item)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<destroy-all-windows>>
# link target: <<function destroy-all-windows>>


**** Function: =destroy-all-windows=                                       :function:


***** Syntax

#+BEGIN_EXAMPLE
(destroy-all-windows)
#+END_EXAMPLE

***** Arguments: None.

***** Returns: None.

***** Description: Destroy all existing window objects.



-----

# link target 2: <<destroy-interface-state>>
# link target: <<function destroy-interface-state>>


**** Function: =destroy-interface-state=                                   :function:


***** Syntax

#+BEGIN_EXAMPLE
(destroy-interface-state state)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<destroy-window>>
# link target: <<function destroy-window>>


**** Function: =destroy-window=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(destroy-window win)
#+END_EXAMPLE

***** Arguments

- WIN :: a [[..3c..window..3e..][<Window>]]
***** Returns

Ignored.
***** Description

Destroy the window object =WIN=, hiding it first if it is not
already hidden.


-----

# link target 2: <<dirty-window>>
# link target: <<function dirty-window>>


**** Function: =dirty-window=                                              :function:


***** Syntax

#+BEGIN_EXAMPLE
(dirty-window win)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<draw-string-at>>
# link target: <<function draw-string-at>>


**** Function: =draw-string-at=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(draw-string-at win str x y &key fg bg redraw align &allow-other-keys)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}
- STR: A string, which may contain formatting directives (see below).
- X, Y: coordinates where the string should be printed, relative to
the top left corner of WIN. If the coordinates are negative then they are
taken as relative to the bottom right corner of WIN. If the coordinates
are :CENTRE then the start of the string is taken as the centre of the
window.
- FG, BG: foreground and background colours for the string.
- ALIGN: one of :LEFT, :RIGHT or :CENTRE. If alignment is :RIGHT,
the string is drawn so that its last character is located at X, Y; if
:CENTRE, so that the middle character is at X, Y.
- REDRAW: Boolean.
***** Returns: None.

***** Description: Draw the string STR on the window object WIN at

position X,Y. The string STR can contain colour-changing directives - see the
documentation for {defun dormouse:make-coloured-string} for details.
***** Examples:

#+BEGIN_EXAMPLE
 (draw-string-at mywin ``Hello, {blue}world!{/}'' 1 1 :fg :green)
#+END_EXAMPLE
***** See Also:

- {defun dormouse:make-coloured-string}


-----

# link target 2: <<filter-string>>
# link target: <<function filter-string>>


**** Function: =filter-string=                                             :function:


***** Syntax

#+BEGIN_EXAMPLE
(filter-string object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<format-at>>
# link target: <<function format-at>>


**** Function: =format-at=                                                 :function:


***** Syntax

#+BEGIN_EXAMPLE
(format-at win winx winy fmt &rest args)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<get-menu-items-for-context>>
# link target: <<function get-menu-items-for-context>>


**** Function: =get-menu-items-for-context=                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(get-menu-items-for-context win context-item)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<gui-event-focus>>
# link target: <<function gui-event-focus>>


**** Internal Function: =gui-event-focus=                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(gui-event-focus object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<gui-event-keypress>>
# link target: <<function gui-event-keypress>>


**** Function: =gui-event-keypress=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(gui-event-keypress object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<gui-event-mouse-state>>
# link target: <<function gui-event-mouse-state>>


**** Function: =gui-event-mouse-state=                                     :function:


***** Syntax

#+BEGIN_EXAMPLE
(gui-event-mouse-state object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<gui-event-string>>
# link target: <<function gui-event-string>>


**** Function: =gui-event-string=                                          :function:


***** Syntax

#+BEGIN_EXAMPLE
(gui-event-string object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<gui-event-winx>>
# link target: <<function gui-event-winx>>


**** Function: =gui-event-winx=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(gui-event-winx object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<gui-event-winy>>
# link target: <<function gui-event-winy>>


**** Function: =gui-event-winy=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(gui-event-winy object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<hide-all-windows>>
# link target: <<function hide-all-windows>>


**** Function: =hide-all-windows=                                          :function:


***** Syntax

#+BEGIN_EXAMPLE
(hide-all-windows)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<hide-window>>
# link target: <<function hide-window>>


**** Function: =hide-window=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(hide-window win &key redraw &allow-other-keys)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}
- REDRAW: boolean value indicating whether the area of the screen occupied
by the window should be redrawn.
***** Returns: None.

***** Description: Hide the window WIN, making it invisible and unable to

receive events. The window is not destroyed.
***** Examples:

#+BEGIN_EXAMPLE
 (hide-window mywin :redraw t)
#+END_EXAMPLE
***** See Also:



-----

# link target 2: <<hyperlink-foreground-colour>>
# link target: <<function hyperlink-foreground-colour>>


**** Function: =hyperlink-foreground-colour=                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(hyperlink-foreground-colour object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<in-view..3f..>>
# link target: <<function in-view..3f..>>


**** Function: =in-view?=                                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(in-view? win mapx mapy)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<in-viewport-map..3f..>>
# link target: <<function in-viewport-map..3f..>>


**** Function: =in-viewport-map?=                                          :function:


***** Syntax

#+BEGIN_EXAMPLE
(in-viewport-map? win mapx mapy)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<key-..3e..string>>
# link target: <<function key-..3e..string>>


**** Function: =key->string=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(key->string k)
#+END_EXAMPLE


***** Description

Return a string that describes the key combination represented by the TCOD
key structure, K, in human-readable form.



-----

# link target 2: <<key-pressed-event..3f..>>
# link target: <<function key-pressed-event..3f..>>


**** Function: =key-pressed-event?=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(key-pressed-event? event)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<legal-window-coordinates..3f..>>
# link target: <<function legal-window-coordinates..3f..>>


**** Function: =legal-window-coordinates?=                                 :function:


***** Syntax

#+BEGIN_EXAMPLE
(legal-window-coordinates? win x y)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<list-item-hotkey>>
# link target: <<function list-item-hotkey>>


**** Function: =list-item-hotkey=                                          :function:


***** Syntax

#+BEGIN_EXAMPLE
(list-item-hotkey instance)
#+END_EXAMPLE


***** Description

Return whether debug-block represents elsewhere code.



-----

# link target 2: <<list-item-item>>
# link target: <<function list-item-item>>


**** Function: =list-item-item=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(list-item-item instance)
#+END_EXAMPLE


***** Description

Return whether debug-block represents elsewhere code.



-----

# link target 2: <<list-item-p>>
# link target: <<function list-item-p>>


**** Function: =list-item-p=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(list-item-p object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<main-gui-loop>>
# link target: <<function main-gui-loop>>


**** Function: =main-gui-loop=                                             :function:


***** Syntax

#+BEGIN_EXAMPLE
(main-gui-loop &optional tick-fn)
#+END_EXAMPLE

***** Arguments

- TICK-FN :: if supplied, must be a function taking no arguments. This
  function will be called after every iteration through the GUI loop.
***** Returns

None.
***** Description


The function [[start-gui]] must be called to initialise libtcod prior to this
function being called.

When called, begins 'running' the currently defined window system. All existing
non-hidden windows are displayed, and a loop is entered where keyboard and
mouse events are intercepted and handled or sent to window objects for
handling. A special case is the PrintScreen key, which calls the TCOD library
function =sys-save-screenshot=.

The loop runs until the global variable [[*exit-gui..3f..*][*exit-gui?*]] is non-nil.


-----

# link target 2: <<make-autolinks-in-hypertext-database>>
# link target: <<function make-autolinks-in-hypertext-database>>


**** Function: =make-autolinks-in-hypertext-database=                      :function:


***** Syntax

#+BEGIN_EXAMPLE
(make-autolinks-in-hypertext-database db &key
                                      (fg
                                       (hyperlink-foreground-colour
                                        *window-theme*)))
#+END_EXAMPLE

***** Arguments

- DB :: A hashtable of topic titles keyed to text strings.
***** Returns

Nil.
***** Description

Iterates through every topic in the hashtable DB. Within the text of each
topic, 'marks up' any unmarked occurrence of the title of another topic
in the same database. Finally, converts all marked hyperlinks to
the internal format recognised by the GUI.


-----

# link target 2: <<map-char-at>>
# link target: <<function map-char-at>>


**** Function: =map-char-at=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(map-char-at win mapx mapy)
#+END_EXAMPLE

***** Arguments:

- WIN:
- MAPX, MAPY: Coordinates on the map associated with WIN.
***** Returns: A character.

***** Description: Returns the character stored at (MAPX, MAPY) on the

map that is 'viewed' by the viewport WIN.


-----

# link target 2: <<map-draw-char-at>>
# link target: <<function map-draw-char-at>>


**** Function: =map-draw-char-at=                                          :function:


***** Syntax

#+BEGIN_EXAMPLE
(map-draw-char-at win ch x y &key background-flag fg bg redraw
                  &allow-other-keys)
#+END_EXAMPLE


***** Description

Draw character with ASCII code CH at position MAPX, MAPY
on the map console of WIN.



-----

# link target 2: <<map-set-background-at>>
# link target: <<function map-set-background-at>>


**** Function: =map-set-background-at=                                     :function:


***** Syntax

#+BEGIN_EXAMPLE
(map-set-background-at win colour mapx mapy &key redraw)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<map-set-foreground-at>>
# link target: <<function map-set-foreground-at>>


**** Function: =map-set-foreground-at=                                     :function:


***** Syntax

#+BEGIN_EXAMPLE
(map-set-foreground-at win colour mapx mapy &key redraw)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<map-xdim>>
# link target: <<function map-xdim>>


**** Function: =map-xdim=                                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(map-xdim object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<map-ydim>>
# link target: <<function map-ydim>>


**** Function: =map-ydim=                                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(map-ydim object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<mouse-drag>>
# link target: <<function mouse-drag>>


**** Function: =mouse-drag=                                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(mouse-drag from-win to-win wfromx wfromy wtox wtoy)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<move-cursor-to>>
# link target: <<function move-cursor-to>>


**** Function: =move-cursor-to=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(move-cursor-to win cursor)
#+END_EXAMPLE


***** Description

Move cursor to point to item number CURSOR in the list.



-----

# link target 2: <<move-cursor-to-end>>
# link target: <<function move-cursor-to-end>>


**** Function: =move-cursor-to-end=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(move-cursor-to-end win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<move-mouse-to-window>>
# link target: <<function move-mouse-to-window>>


**** Function: =move-mouse-to-window=                                      :function:


***** Syntax

#+BEGIN_EXAMPLE
(move-mouse-to-window win winx winy)
#+END_EXAMPLE


***** Description

Move mouse pointer to WINX, WINY within the window WIN.



-----

# link target 2: <<move-window>>
# link target: <<function move-window>>


**** Function: =move-window=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(move-window win tlx tly)
#+END_EXAMPLE

***** Arguments

- WIN :: a [[..3c..window..3e..][<Window>]]
- TLX, TLY :: coordinates on the screen where the top left corner of =WIN=
  is to be moved to.
***** Returns

None.
***** Description

Move the window =WIN= so that its top left corner is located
at =(TLX, TLY)= relative to the top left corner of the screen.


-----

# link target 2: <<open-hypertext-topic>>
# link target: <<function open-hypertext-topic>>


**** Function: =open-hypertext-topic=                                      :function:


***** Syntax

#+BEGIN_EXAMPLE
(open-hypertext-topic win topic)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<prepare-window>>
# link target: <<function prepare-window>>


**** Function: =prepare-window=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(prepare-window win)
#+END_EXAMPLE


***** Description

Redraw window contents, but don't actually copy the window console
anywhere.



-----

# link target 2: <<prepare-windows-by-type>>
# link target: <<function prepare-windows-by-type>>


**** Function: =prepare-windows-by-type=                                   :function:


***** Syntax

#+BEGIN_EXAMPLE
(prepare-windows-by-type winclass)
#+END_EXAMPLE

***** Arguments:

- WINCLASS: A symbol naming a subclass of {defclass dormouse:<Window>}.
***** Returns: None.

***** Description: Calls {defgeneric dormouse:prepare-window} for each existing

window object that inherits from WINCLASS.
***** Examples:

#+BEGIN_EXAMPLE
 (prepare-windows-by-type '<Message-Window>)
#+END_EXAMPLE


-----

# link target 2: <<process-window>>
# link target: <<function process-window>>


**** Function: =process-window=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(process-window win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<raise-window>>
# link target: <<function raise-window>>


**** Function: =raise-window=                                              :function:


***** Syntax

#+BEGIN_EXAMPLE
(raise-window win &key redraw &allow-other-keys)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}
- REDRAW: boolean value indicating whether the area of the screen occupied
by the window should be redrawn.
***** Returns: None.

***** Description: Put the window WIN at the top of the window stack, so that

it is displayed as overlying any other overlapping windows.
***** Examples:

***** See Also:



-----

# link target 2: <<redraw-all-windows>>
# link target: <<function redraw-all-windows>>


**** Function: =redraw-all-windows=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(redraw-all-windows &key except)
#+END_EXAMPLE

***** Arguments:

- EXCEPT :: list of window instances to exclude, or nil.
***** Returns: None.

***** Description: Copy all visible windows onto the root console.



-----

# link target 2: <<redraw-window>>
# link target: <<function redraw-window>>


**** Function: =redraw-window=                                             :function:


***** Syntax

#+BEGIN_EXAMPLE
(redraw-window win)
#+END_EXAMPLE

***** Arguments

- WIN :: a [[..3c..window..3e..][<Window>]]
***** Returns

Ignored.
***** Description

Force =WIN= to copy itself onto the root console.


-----

# link target 2: <<redraw-window-area>>
# link target: <<function redraw-window-area>>


**** Function: =redraw-window-area=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(redraw-window-area win &key (draw-window t))
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}
- DRAW-WINDOW: Boolean (default: T)
***** Returns: None.

***** Description: Force the area of the screen covered by WIN to be redrawn.

If DRAW-WINDOW is non-nil, also redraw WIN itself; otherwise just redraw
all the other windows underlying WIN.


-----

# link target 2: <<resize-window>>
# link target: <<function resize-window>>


**** Function: =resize-window=                                             :function:


***** Syntax

#+BEGIN_EXAMPLE
(resize-window win width height)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<restore-interface-state>>
# link target: <<function restore-interface-state>>


**** Function: =restore-interface-state=                                   :function:


***** Syntax

#+BEGIN_EXAMPLE
(restore-interface-state state)
#+END_EXAMPLE

***** Arguments:

- STATE :: A WINDOWS-CONFIGURATION struct, usually one created previously
by a call to `save-interface-state'.
***** Returns:

A new WINDOWS-CONFIGURATION struct, containing information about the overwritten
interfact state.


-----

# link target 2: <<resume-gui>>
# link target: <<function resume-gui>>


**** Function: =resume-gui=                                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(resume-gui)
#+END_EXAMPLE

***** Arguments: None.

***** Returns: None.

***** Description: Resume running the currently defined window system.



-----

# link target 2: <<rootx-..3e..winx>>
# link target: <<function rootx-..3e..winx>>


**** Function: =rootx->winx=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(rootx->winx win rootx)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}.
- ROOTX: An X-coordinate on the screen (root console).
***** Returns: Integer.

***** Description: Given the screen X-coordinate ROOTX, return the X-coordinate

of the same screen point relative to the top left corner of the window WIN.
***** Examples:

#+BEGIN_EXAMPLE
 (rootx->winx mywin 10)  ; if top left corner of mywin is at (8,8)
                         ; then this returns 2
#+END_EXAMPLE
***** See Also:

- {defun dormouse:rooty->winy}


-----

# link target 2: <<rooty-..3e..winy>>
# link target: <<function rooty-..3e..winy>>


**** Function: =rooty->winy=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(rooty->winy win rooty)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}.
- ROOTY: A Y-coordinate on the screen (root console).
***** Returns: Integer.

***** Description: Given the screen Y-coordinate ROOTY, return the Y-coordinate

of the same screen point relative to the top left corner of the window WIN.
***** Examples:

#+BEGIN_EXAMPLE
 (rooty->winy mywin 10)  ; if top left corner of mywin is at (8,8)
                         ; then this returns 2
#+END_EXAMPLE
***** See Also:

- {defun dormouse:rootx->winx}


-----

# link target 2: <<save-interface-state>>
# link target: <<function save-interface-state>>


**** Function: =save-interface-state=                                      :function:


***** Syntax

#+BEGIN_EXAMPLE
(save-interface-state)
#+END_EXAMPLE

***** Returns:

A WINDOWS-CONFIGURATION struct, which contains information sufficient to
restore the interface to its current state in future via a call to
`restore-interface-state'.

 Intended to be called if we want to make substantial changes to the interface
setup, but might later want to restore the current window setup.


-----

# link target 2: <<screen-height>>
# link target: <<function screen-height>>


**** Function: =screen-height=                                             :function:


***** Syntax

#+BEGIN_EXAMPLE
(screen-height)
#+END_EXAMPLE

***** Arguments: None.

***** Returns: Integer.

***** Description: Returns the height of the screen (root console) in rows.



-----

# link target 2: <<screen-width>>
# link target: <<function screen-width>>


**** Function: =screen-width=                                              :function:


***** Syntax

#+BEGIN_EXAMPLE
(screen-width)
#+END_EXAMPLE

***** Arguments: None.

***** Returns: Integer.

***** Description: Returns the width of the screen (root console) in columns.



-----

# link target 2: <<send-key-to-window>>
# link target: <<function send-key-to-window>>


**** Function: =send-key-to-window=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(send-key-to-window win key winx winy)
#+END_EXAMPLE


***** Description

Return non-nil if the key is handled, nil if not handled.



-----

# link target 2: <<send-to-window>>
# link target: <<function send-to-window>>


**** Function: =send-to-window=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(send-to-window win event)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of [[..3c..window..3e..][<Window>]]
- EVENT :: an instance of [[..3c..gui-event..3e..][<GUI-Event>]]
***** Returns: Non-nil if the event is handled, nil otherwise.

***** Description: Send an event to the window WIN. The event is described by EVENT.

***** Examples:

#+BEGIN_EXAMPLE
 (send-to-window mywin (make-instance '<GUI-Mouse-Event>
                 :mouse-state (get-mouse-state))
#+END_EXAMPLE
***** See Also:



-----

# link target 2: <<share-map>>
# link target: <<function share-map>>


**** Function: =share-map=                                                 :function:


***** Syntax

#+BEGIN_EXAMPLE
(share-map receiver giver tlx tly)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<start-gui>>
# link target: <<function start-gui>>


**** Function: =start-gui=                                                 :function:


***** Syntax

#+BEGIN_EXAMPLE
(start-gui &key (title the doryen library) (width nil) (height nil)
           (font-file *default-font-file*) (fps 20))
#+END_EXAMPLE

***** Arguments:

- TITLE: String, used as the title displayed at the top of the TCOD
window.
- WIDTH: Desired width of the TCOD root console, in characters. Default 80.
  If NIL or not given, the root console width will be auto-calculated
  based on screen resolution and font size.
- HEIGHT: Desired height of the TCOD root console, in characters. Default 25.
  If NIL or not given, the root console height will be auto-calculated
  based on screen resolution and font size.
- FONT-FILE: Path to the font file to use. The default is
[[*default-font-file*]].
***** Returns: None.

***** Description: Initialise the TCOD library and prepare for running

the GUI.
***** See Also: [[main-gui-loop]]



-----

# link target 2: <<tooltip-text>>
# link target: <<function tooltip-text>>


**** Function: =tooltip-text=                                              :function:


***** Syntax

#+BEGIN_EXAMPLE
(tooltip-text win datum winx winy)
#+END_EXAMPLE


***** Description

Accepts an arbitrary value. Returns nil if the datum
should not be associated with a tooltip for this window. Otherwise returns a
list of strings, which can contain colour fields.  Each string can be an
arbitrary length, as they are treated as separate messages by the floating
window.



-----

# link target 2: <<unshare-map>>
# link target: <<function unshare-map>>


**** Function: =unshare-map=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(unshare-map receiver giver)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<view-brx>>
# link target: <<function view-brx>>


**** Function: =view-brx=                                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(view-brx win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<view-bry>>
# link target: <<function view-bry>>


**** Function: =view-bry=                                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(view-bry win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<view-tlx>>
# link target: <<function view-tlx>>


**** Function: =view-tlx=                                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(view-tlx object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<view-tly>>
# link target: <<function view-tly>>


**** Function: =view-tly=                                                  :function:


***** Syntax

#+BEGIN_EXAMPLE
(view-tly object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<viewport-height>>
# link target: <<function viewport-height>>


**** Function: =viewport-height=                                           :function:


***** Syntax

#+BEGIN_EXAMPLE
(viewport-height win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<viewport-width>>
# link target: <<function viewport-width>>


**** Function: =viewport-width=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(viewport-width win)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<window-auto-redraw..3f..>>
# link target: <<function window-auto-redraw..3f..>>


**** Function: =window-auto-redraw?=                                       :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-auto-redraw? win)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-background>>
# link target: <<function window-background>>


**** Function: =window-background=                                         :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-background object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-brx>>
# link target: <<function window-brx>>


**** Function: =window-brx=                                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-brx win)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}
***** Returns: An X-coordinate.

***** Description:

Return the X-coordinate of the bottom right corner of the window.
***** See Also: {defun dormouse:window-bry}



-----

# link target 2: <<window-bry>>
# link target: <<function window-bry>>


**** Function: =window-bry=                                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-bry win)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}
***** Returns: A Y-coordinate.

***** Description:

Return the Y-coordinate of the bottom right corner of the window.
***** See Also: {defun dormouse:window-brx}



-----

# link target 2: <<window-can-close..3f..>>
# link target: <<function window-can-close..3f..>>


**** Function: =window-can-close?=                                         :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-can-close? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-can-drag..3f..>>
# link target: <<function window-can-drag..3f..>>


**** Function: =window-can-drag?=                                          :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-can-drag? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-can-resize..3f..>>
# link target: <<function window-can-resize..3f..>>


**** Function: =window-can-resize?=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-can-resize? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-changed!>>
# link target: <<function window-changed!>>


**** Function: =window-changed!=                                           :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-changed! win)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-changed..3f..>>
# link target: <<function window-changed..3f..>>


**** Function: =window-changed?=                                           :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-changed? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-children>>
# link target: <<function window-children>>


**** Function: =window-children=                                           :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-children object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-cursor>>
# link target: <<function window-cursor>>


**** Function: =window-cursor=                                             :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-cursor object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-draw-char-at>>
# link target: <<function window-draw-char-at>>


**** Function: =window-draw-char-at=                                       :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-draw-char-at win ch winx winy &key background-flag fg bg redraw
                     &allow-other-keys)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<window-echo-input..3f..>>
# link target: <<function window-echo-input..3f..>>


**** Function: =window-echo-input?=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-echo-input? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-foreground>>
# link target: <<function window-foreground>>


**** Function: =window-foreground=                                         :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-foreground object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-framed..3f..>>
# link target: <<function window-framed..3f..>>


**** Function: =window-framed?=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-framed? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-height>>
# link target: <<function window-height>>


**** Function: =window-height=                                             :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-height object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-hidden..3f..>>
# link target: <<function window-hidden..3f..>>


**** Function: =window-hidden?=                                            :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-hidden? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-input-active..3f..>>
# link target: <<function window-input-active..3f..>>


**** Function: =window-input-active?=                                      :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-input-active? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-input-function>>
# link target: <<function window-input-function>>


**** Function: =window-input-function=                                     :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-input-function object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-input-history>>
# link target: <<function window-input-history>>


**** Function: =window-input-history=                                      :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-input-history object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-item-at-cursor>>
# link target: <<function window-item-at-cursor>>


**** Function: =window-item-at-cursor=                                     :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-item-at-cursor win)
#+END_EXAMPLE


***** Description

Return the list-item that is at the current cursor
position in this window (the 'cursor' moves up and down the list and always
points to one of the items in the list).



-----

# link target 2: <<window-items>>
# link target: <<function window-items>>


**** Internal Function: =window-items=                                     :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-items object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-items-lines>>
# link target: <<function window-items-lines>>


**** Internal Function: =window-items-lines=                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-items-lines win)
#+END_EXAMPLE


***** Description

Returns the total number of lines needed to display all
the items in the window's list.



-----

# link target 2: <<window-offset>>
# link target: <<function window-offset>>


**** Internal Function: =window-offset=                                    :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-offset object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-raise-children-with-parent..3f..>>
# link target: <<function window-raise-children-with-parent..3f..>>


**** Function: =window-raise-children-with-parent?=                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-raise-children-with-parent? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-show-tail-by-default..3f..>>
# link target: <<function window-show-tail-by-default..3f..>>


**** Function: =window-show-tail-by-default?=                              :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-show-tail-by-default? object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-tlx>>
# link target: <<function window-tlx>>


**** Function: =window-tlx=                                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-tlx object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-tly>>
# link target: <<function window-tly>>


**** Function: =window-tly=                                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-tly object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<window-width>>
# link target: <<function window-width>>


**** Function: =window-width=                                              :function:


***** Syntax

#+BEGIN_EXAMPLE
(window-width object)
#+END_EXAMPLE


***** Description

Not documented.



-----

# link target 2: <<winx-..3e..mapx>>
# link target: <<function winx-..3e..mapx>>


**** Function: =winx->mapx=                                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(winx->mapx vp x)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<winx-..3e..rootx>>
# link target: <<function winx-..3e..rootx>>


**** Function: =winx->rootx=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(winx->rootx win winx)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}.
- WINX: An X-coordinate relative to the top left corner of WIN.
***** Returns: Integer.

***** Description: Given the X-coordinate WINX, which is relative to the top left

corner of WIN, return the absolute X-coordinate of the same screen point, i.e.
its console X-coordinate.
***** Examples:

#+BEGIN_EXAMPLE
 (winx->rootx mywin 5)  ; if top left corner of mywin is at (8,8)
                         ; then this returns 13
#+END_EXAMPLE
***** See Also:

- {defun dormouse:winy->rooty}


-----

# link target 2: <<winy-..3e..mapy>>
# link target: <<function winy-..3e..mapy>>


**** Function: =winy->mapy=                                                :function:


***** Syntax

#+BEGIN_EXAMPLE
(winy->mapy vp y)
#+END_EXAMPLE


***** Description

TODO document.



-----

# link target 2: <<winy-..3e..rooty>>
# link target: <<function winy-..3e..rooty>>


**** Function: =winy->rooty=                                               :function:


***** Syntax

#+BEGIN_EXAMPLE
(winy->rooty win winy)
#+END_EXAMPLE

***** Arguments:

- WIN: an instance of {defclass dormouse:<Window>}.
- WINY: A Y-coordinate relative to the top left corner of WIN.
***** Returns: Integer.

***** Description: Given the Y-coordinate WINY, which is relative to the top left

corner of WIN, return the absolute Y-coordinate of the same screen point, i.e.
its console Y-coordinate.
***** Examples:

#+BEGIN_EXAMPLE
 (winy->rooty mywin 5)  ; if top left corner of mywin is at (8,8)
                         ; then this returns 13
#+END_EXAMPLE
***** See Also:

- {defun dormouse:winx->rootx}


-----

# link target 2: <<wrap-coloured-text>>
# link target: <<function wrap-coloured-text>>


**** Function: =wrap-coloured-text=                                        :function:


***** Syntax

#+BEGIN_EXAMPLE
(wrap-coloured-text text &key width)
#+END_EXAMPLE


***** Description

TODO document






** Index

 [[index A][A]]  [[index B][B]]  [[index C][C]]  [[index D][D]]  [[index F][F]]
 [[index G][G]]  [[index H][H]]  [[index I][I]]  [[index K][K]]  [[index L][L]]
 [[index M][M]]  [[index O][O]]  [[index P][P]]  [[index R][R]]  [[index S][S]]
 [[index T][T]]  [[index U][U]]  [[index V][V]]  [[index W][W]]  [[index
nonalphabetic][nonalphabetic]]


*** Nonalphabetic


# link target: <<index nonalphabetic>>
- [[variable *alt*][=dormouse:*alt*=]], Variable
- [[variable *ctrl*][=dormouse:*ctrl*=]], Variable
- [[variable *exit-gui..3f..*][=dormouse:*exit-gui?*=]], Variable
- [[variable *mouse-x*][=dormouse:*mouse-x*=]], Variable
- [[variable *mouse-y*][=dormouse:*mouse-y*=]], Variable
- [[variable *shift*][=dormouse:*shift*=]], Variable
- [[variable *window-stack*][=dormouse:*window-stack*=]], Variable
- [[variable *window-theme*][=dormouse:*window-theme*=]], Variable
- [[constant ..2b..dimmed..2b..][=dormouse:+dimmed+=]], Constant
- [[constant ..2b..invisible..2b..][=dormouse:+invisible+=]], Constant
- [[constant ..2b..opaque..2b..][=dormouse:+opaque+=]], Constant
- [[class ..3c..alert-window..3e..][=dormouse:<alert-window>=]], Class
- [[class ..3c..background-window..3e..][=dormouse:<background-window>=]],
  Class
- [[class ..3c..dialog-window..3e..][=dormouse:<dialog-window>=]], Class
- [[class ..3c..filtered-window..3e..][=dormouse:<filtered-window>=]], Class
- [[class ..3c..ghost-window..3e..][=dormouse:<ghost-window>=]], Class
- [[class ..3c..gui-dialog-event..3e..][=dormouse:<gui-dialog-event>=]], Class
- [[class ..3c..gui-event..3e..][=dormouse:<gui-event>=]], Class
- [[class ..3c..gui-mouse-drag-event..3e..][=dormouse:<gui-mouse-drag
  event>=]], Class
- [[class ..3c..gui-select-event..3e..][=dormouse:<gui-select-event>=]], Class
- [[class ..3c..hypertext-window..3e..][=dormouse:<hypertext-window>=]], Class
- [[class ..3c..key-event..3e..][=dormouse:<key-event>=]], Class
- [[class ..3c..list-window..3e..][=dormouse:<list-window>=]], Class
- [[class ..3c..log-window..3e..][=dormouse:<log-window>=]], Class
- [[class ..3c..menu-window..3e..][=dormouse:<menu-window>=]], Class
- [[class ..3c..meter-window..3e..][=dormouse:<meter-window>=]], Class
- [[class ..3c..modal-window..3e..][=dormouse:<modal-window>=]], Class
- [[class ..3c..mouse-double-click-event..3e..][=dormouse:<mouse-double-click
  event>=]], Class
- [[class ..3c..mouse-event..3e..][=dormouse:<mouse-event>=]], Class
- [[class ..3c..mouse-hover-event..3e..][=dormouse:<mouse-hover-event>=]],
  Class
- [[class ..3c..pager-window..3e..][=dormouse:<pager-window>=]], Class
- [[class ..3c..simple-prompt-window..3e..][=dormouse:<simple-prompt
  window>=]], Class
- [[class ..3c..terminal-window..3e..][=dormouse:<terminal-window>=]], Class
- [[class ..3c..tooltip-window..3e..][=dormouse:<tooltip-window>=]], Class
- [[class ..3c..viewport..3e..][=dormouse:<viewport>=]], Class
- [[class ..3c..window-theme..3e..][=dormouse:<window-theme>=]], Class
- [[class ..3c..window-with-context-menu..3e..][=dormouse:<window-with-context
  menu>=]], Class
- [[class ..3c..window..3e..][=dormouse:<window>=]], Class
- [[class ..3c..yes..2f..no-window..3e..][=dormouse:<yes/no-window>=]], Class



*** A


# link target: <<index A>>
- [[function add-browser-line][=dormouse:add-browser-line=]], Function
- [[function add-item][=dormouse:add-item=]], Function
- [[function add-message][=dormouse:add-message=]], Function
- [[function add-message-and-redraw][=dormouse:add-message-and-redraw=]],
  Function
- [[function all-windows][=dormouse:all-windows=]], Function



*** B


# link target: <<index B>>
- [[function bar-chart][=dormouse:bar-chart=]], Function
- [[function binding-..3e..key][=dormouse:binding->key=]], Function
- [[function bottom-message][=dormouse:bottom-message=]], Function
- [[function button][=dormouse:button=]], Function



*** C


# link target: <<index C>>
- [[function calculate-floating-window-width][=dormouse:calculate-floating
  window-width=]], Function
- [[function centre-viewport-on][=dormouse:centre-viewport-on=]], Function
- [[function character-..3e..shift][=dormouse:character->shift=]], Function
- [[function character-..3e..vk][=dormouse:character->vk=]], Function
- [[function clear-browser-lines][=dormouse:clear-browser-lines=]], Function
- [[function clear-filter][=dormouse:clear-filter=]], Function
- [[function clear-items][=dormouse:clear-items=]], Function
- [[function clear-map][=dormouse:clear-map=]], Function
- [[function clear-messages][=dormouse:clear-messages=]], Function
- [[function colour][=tcod:colour=]], Function
- [[function colour][=tcod:colour=]], Function
- [[function coloured-string-length][=dormouse:coloured-string-length=]],
  Function
- [[function colourise][=dormouse:colourise=]], Function
- [[function command-from-context-menu][=dormouse:command-from-context-menu=]],
  Function
- [[function copy-windows-to-console][=dormouse:copy-windows-to-console=]],
  Function
- [[function cursor-moved-to-item][=dormouse:cursor-moved-to-item=]], Function



*** D


# link target: <<index D>>
- [[function destroy-all-windows][=dormouse:destroy-all-windows=]], Function
- [[function destroy-interface-state][=dormouse:destroy-interface-state=]],
  Function
- [[function destroy-window][=dormouse:destroy-window=]], Function
- [[function dirty-window][=dormouse:dirty-window=]], Function
- [[macro do-for-windows-by-type][=dormouse:do-for-windows-by-type=]], Macro
- [[function draw-string-at][=dormouse:draw-string-at=]], Function



*** F


# link target: <<index F>>
- [[function filter-string][=dormouse:filter-string=]], Function
- [[function format-at][=dormouse:format-at=]], Function



*** G


# link target: <<index G>>
- [[function get-menu-items-for-context][=dormouse:get-menu-items-for
  context=]], Function
- [[function gui-event-focus][=dormouse:gui-event-focus=]], Function
- [[function gui-event-keypress][=dormouse:gui-event-keypress=]], Function
- [[function gui-event-mouse-state][=dormouse:gui-event-mouse-state=]],
  Function
- [[function gui-event-string][=dormouse:gui-event-string=]], Function
- [[function gui-event-winx][=dormouse:gui-event-winx=]], Function
- [[function gui-event-winy][=dormouse:gui-event-winy=]], Function



*** H


# link target: <<index H>>
- [[function hide-all-windows][=dormouse:hide-all-windows=]], Function
- [[function hide-window][=dormouse:hide-window=]], Function
- [[function hyperlink-foreground-colour][=dormouse:hyperlink-foreground
  colour=]], Function



*** I


# link target: <<index I>>
- [[function in-view..3f..][=dormouse:in-view?=]], Function
- [[function in-viewport-map..3f..][=dormouse:in-viewport-map?=]], Function



*** K


# link target: <<index K>>
- [[function key-..3e..string][=dormouse:key->string=]], Function
- [[function key-pressed-event..3f..][=dormouse:key-pressed-event?=]], Function



*** L


# link target: <<index L>>
- [[function legal-window-coordinates..3f..][=dormouse:legal-window
  coordinates?=]], Function
- [[structure list-item][=dormouse:list-item=]], Structure
- [[function list-item-hotkey][=dormouse:list-item-hotkey=]], Function
- [[function list-item-item][=dormouse:list-item-item=]], Function
- [[function list-item-p][=dormouse:list-item-p=]], Function



*** M


# link target: <<index M>>
- [[function main-gui-loop][=dormouse:main-gui-loop=]], Function
- [[function make-autolinks-in-hypertext-database][=dormouse:make-autolinks-in
  hypertext-database=]], Function
- [[function map-char-at][=dormouse:map-char-at=]], Function
- [[function map-draw-char-at][=dormouse:map-draw-char-at=]], Function
- [[function map-set-background-at][=dormouse:map-set-background-at=]],
  Function
- [[function map-set-foreground-at][=dormouse:map-set-foreground-at=]],
  Function
- [[function map-xdim][=dormouse:map-xdim=]], Function
- [[function map-ydim][=dormouse:map-ydim=]], Function
- [[function mouse-drag][=dormouse:mouse-drag=]], Function
- [[function move-cursor-to][=dormouse:move-cursor-to=]], Function
- [[function move-cursor-to-end][=dormouse:move-cursor-to-end=]], Function
- [[function move-mouse-to-window][=dormouse:move-mouse-to-window=]], Function
- [[function move-window][=dormouse:move-window=]], Function



*** O


# link target: <<index O>>
- [[function open-hypertext-topic][=dormouse:open-hypertext-topic=]], Function



*** P


# link target: <<index P>>
- [[function prepare-window][=dormouse:prepare-window=]], Function
- [[function prepare-windows-by-type][=dormouse:prepare-windows-by-type=]],
  Function
- [[function process-window][=dormouse:process-window=]], Function



*** R


# link target: <<index R>>
- [[function raise-window][=dormouse:raise-window=]], Function
- [[function redraw-all-windows][=dormouse:redraw-all-windows=]], Function
- [[function redraw-window][=dormouse:redraw-window=]], Function
- [[function redraw-window-area][=dormouse:redraw-window-area=]], Function
- [[function resize-window][=dormouse:resize-window=]], Function
- [[function restore-interface-state][=dormouse:restore-interface-state=]],
  Function
- [[function resume-gui][=dormouse:resume-gui=]], Function
- [[function rootx-..3e..winx][=dormouse:rootx->winx=]], Function
- [[function rooty-..3e..winy][=dormouse:rooty->winy=]], Function



*** S


# link target: <<index S>>
- [[function save-interface-state][=dormouse:save-interface-state=]], Function
- [[function screen-height][=dormouse:screen-height=]], Function
- [[function screen-width][=dormouse:screen-width=]], Function
- [[function send-key-to-window][=dormouse:send-key-to-window=]], Function
- [[function send-to-window][=dormouse:send-to-window=]], Function
- [[function share-map][=dormouse:share-map=]], Function
- [[function start-gui][=dormouse:start-gui=]], Function



*** T


# link target: <<index T>>
- [[function tooltip-text][=dormouse:tooltip-text=]], Function



*** U


# link target: <<index U>>
- [[function unshare-map][=dormouse:unshare-map=]], Function



*** V


# link target: <<index V>>
- [[function view-brx][=dormouse:view-brx=]], Function
- [[function view-bry][=dormouse:view-bry=]], Function
- [[function view-tlx][=dormouse:view-tlx=]], Function
- [[function view-tly][=dormouse:view-tly=]], Function
- [[function viewport-height][=dormouse:viewport-height=]], Function
- [[function viewport-width][=dormouse:viewport-width=]], Function



*** W


# link target: <<index W>>
- [[function window-auto-redraw..3f..][=dormouse:window-auto-redraw?=]],
  Function
- [[function window-background][=dormouse:window-background=]], Function
- [[function window-brx][=dormouse:window-brx=]], Function
- [[function window-bry][=dormouse:window-bry=]], Function
- [[function window-can-close..3f..][=dormouse:window-can-close?=]], Function
- [[function window-can-drag..3f..][=dormouse:window-can-drag?=]], Function
- [[function window-can-resize..3f..][=dormouse:window-can-resize?=]], Function
- [[function window-changed!][=dormouse:window-changed!=]], Function
- [[function window-changed..3f..][=dormouse:window-changed?=]], Function
- [[function window-children][=dormouse:window-children=]], Function
- [[function window-cursor][=dormouse:window-cursor=]], Function
- [[function window-draw-char-at][=dormouse:window-draw-char-at=]], Function
- [[function window-echo-input..3f..][=dormouse:window-echo-input?=]], Function
- [[function window-foreground][=dormouse:window-foreground=]], Function
- [[function window-framed..3f..][=dormouse:window-framed?=]], Function
- [[function window-height][=dormouse:window-height=]], Function
- [[function window-hidden..3f..][=dormouse:window-hidden?=]], Function
- [[function window-input-active..3f..][=dormouse:window-input-active?=]],
  Function
- [[function window-input-function][=dormouse:window-input-function=]],
  Function
- [[function window-input-history][=dormouse:window-input-history=]], Function
- [[function window-item-at-cursor][=dormouse:window-item-at-cursor=]],
  Function
- [[function window-items][=dormouse:window-items=]], Function
- [[function window-items-lines][=dormouse:window-items-lines=]], Function
- [[function window-offset][=dormouse:window-offset=]], Function
- [[function window-raise-children-with-parent..3f..][=dormouse:window-raise
  children-with-parent?=]], Function
- [[function window-show-tail-by-default..3f..][=dormouse:window-show-tail-by
  default?=]], Function
- [[function window-tlx][=dormouse:window-tlx=]], Function
- [[function window-tly][=dormouse:window-tly=]], Function
- [[function window-width][=dormouse:window-width=]], Function
- [[function winx-..3e..mapx][=dormouse:winx->mapx=]], Function
- [[function winx-..3e..rootx][=dormouse:winx->rootx=]], Function
- [[function winy-..3e..mapy][=dormouse:winy->mapy=]], Function
- [[function winy-..3e..rooty][=dormouse:winy->rooty=]], Function
- [[macro with-no-redraw][=dormouse:with-no-redraw=]], Macro
- [[macro with-window-unchanged][=dormouse:with-window-unchanged=]], Macro
- [[function wrap-coloured-text][=dormouse:wrap-coloured-text=]], Function





* Colophon

This documentation was generated from Common Lisp source code using CLOD, version 1.0.
The latest version of CLOD is available [[http://bitbucket.org/eeeickythump/clod/][here]].
